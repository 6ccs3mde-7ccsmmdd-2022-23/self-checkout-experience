/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.generator;

import com.google.common.collect.Iterators;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.resource.Resource;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.generator.AbstractGenerator;
import org.eclipse.xtext.generator.IFileSystemAccess2;
import org.eclipse.xtext.generator.IGeneratorContext;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;
import org.eclipse.xtext.xbase.lib.IteratorExtensions;
import org.eclipse.xtext.xbase.lib.ListExtensions;
import org.eclipse.xtext.xbase.lib.StringExtensions;
import self_checkout_experience.selfCheckoutExperience.AddToOnlineBasket;
import self_checkout_experience.selfCheckoutExperience.CarryItems;
import self_checkout_experience.selfCheckoutExperience.Checkout;
import self_checkout_experience.selfCheckoutExperience.Drop;
import self_checkout_experience.selfCheckoutExperience.HoldSelfScanner;
import self_checkout_experience.selfCheckoutExperience.MoveStatement;
import self_checkout_experience.selfCheckoutExperience.PickStatement;
import self_checkout_experience.selfCheckoutExperience.RemoveFromOnlineBasket;
import self_checkout_experience.selfCheckoutExperience.Repeat;
import self_checkout_experience.selfCheckoutExperience.Scan;
import self_checkout_experience.selfCheckoutExperience.ScanAndAddToBasket;
import self_checkout_experience.selfCheckoutExperience.Search;
import self_checkout_experience.selfCheckoutExperience.SelfCheckoutExperience;
import self_checkout_experience.selfCheckoutExperience.SelfCheckoutInstore;
import self_checkout_experience.selfCheckoutExperience.SelfCheckoutOnline;
import self_checkout_experience.selfCheckoutExperience.Self_checkout;
import self_checkout_experience.selfCheckoutExperience.TurnStatement;
import self_checkout_experience.selfCheckoutExperience.WalkStatement;

/**
 * Generates code from your model files on save.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#code-generation
 */
@SuppressWarnings("all")
public class SelfCheckoutExperienceGenerator extends AbstractGenerator {
  @Override
  public void doGenerate(final Resource resource, final IFileSystemAccess2 fsa, final IGeneratorContext context) {
    EObject _head = IterableExtensions.<EObject>head(resource.getContents());
    final Self_checkout model = ((Self_checkout) _head);
    fsa.generateFile("self_checkout_experience.txt", this.generate(model));
    final String className = this.deriveClassName(resource);
    fsa.generateFile((className + ".java"), this.doGenerateClass(model, className));
  }
  
  public String deriveClassName(final Resource resource) {
    String _xblockexpression = null;
    {
      final String origFileName = resource.getURI().lastSegment();
      String _firstUpper = StringExtensions.toFirstUpper(origFileName.substring(0, origFileName.indexOf(".")));
      _xblockexpression = (_firstUpper + "Self_checkout");
    }
    return _xblockexpression;
  }
  
  public CharSequence generate(final Self_checkout checkout) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("Self checkout summary:");
    _builder.newLine();
    _builder.append("IN STORE ");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("- ");
    int _size = IteratorExtensions.size(Iterators.<PickStatement>filter(checkout.eAllContents(), PickStatement.class));
    _builder.append(_size, "\t");
    _builder.append(" pick statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_1 = IteratorExtensions.size(Iterators.<ScanAndAddToBasket>filter(checkout.eAllContents(), ScanAndAddToBasket.class));
    _builder.append(_size_1, "\t");
    _builder.append(" scan and add to basket statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_2 = IteratorExtensions.size(Iterators.<Drop>filter(checkout.eAllContents(), Drop.class));
    _builder.append(_size_2, "\t");
    _builder.append(" drop statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_3 = IteratorExtensions.size(Iterators.<Checkout>filter(checkout.eAllContents(), Checkout.class));
    _builder.append(_size_3, "\t");
    _builder.append(" go to self-checkout statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_4 = IteratorExtensions.size(Iterators.<Scan>filter(checkout.eAllContents(), Scan.class));
    _builder.append(_size_4, "\t");
    _builder.append(" scan statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_5 = IteratorExtensions.size(Iterators.<CarryItems>filter(checkout.eAllContents(), CarryItems.class));
    _builder.append(_size_5, "\t");
    _builder.append(" carry item statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_6 = IteratorExtensions.size(Iterators.<MoveStatement>filter(checkout.eAllContents(), MoveStatement.class));
    _builder.append(_size_6, "\t");
    _builder.append(" move statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_7 = IteratorExtensions.size(Iterators.<TurnStatement>filter(checkout.eAllContents(), TurnStatement.class));
    _builder.append(_size_7, "\t");
    _builder.append(" turn statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_8 = IteratorExtensions.size(Iterators.<Repeat>filter(checkout.eAllContents(), Repeat.class));
    _builder.append(_size_8, "\t");
    _builder.append(" repeat statements");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("- ");
    int _size_9 = IteratorExtensions.size(Iterators.<WalkStatement>filter(checkout.eAllContents(), WalkStatement.class));
    _builder.append(_size_9, "\t");
    _builder.append(" Walk statements");
    _builder.newLineIfNotEmpty();
    _builder.append("ONLINE");
    _builder.newLine();
    _builder.append("- ");
    int _size_10 = IteratorExtensions.size(Iterators.<Search>filter(checkout.eAllContents(), Search.class));
    _builder.append(_size_10);
    _builder.append(" search statements");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_11 = IteratorExtensions.size(Iterators.<AddToOnlineBasket>filter(checkout.eAllContents(), AddToOnlineBasket.class));
    _builder.append(_size_11);
    _builder.append(" add to online basket statements");
    _builder.newLineIfNotEmpty();
    _builder.append("- ");
    int _size_12 = IteratorExtensions.size(Iterators.<RemoveFromOnlineBasket>filter(checkout.eAllContents(), RemoveFromOnlineBasket.class));
    _builder.append(_size_12);
    _builder.append(" remove from online basket statements");
    _builder.newLineIfNotEmpty();
    return _builder;
  }
  
  public CharSequence doGenerateClass(final Self_checkout program, final String className) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("import self_checkout_experience.*;");
    _builder.newLine();
    _builder.newLine();
    _builder.append("public class ");
    _builder.append(className);
    _builder.append(" {");
    _builder.newLineIfNotEmpty();
    _builder.append("\t");
    _builder.append("public static void main(String[] args) {");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("SelfCheckoutFrame scf = new SelfCheckoutFrame();");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("Self_checkout sc = new Self_checkout(scf) {");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("@override");
    _builder.newLine();
    _builder.append("\t\t\t");
    _builder.append("public void run() {");
    _builder.newLine();
    _builder.append("\t\t\t\t");
    final Function1<SelfCheckoutExperience, String> _function = (SelfCheckoutExperience it) -> {
      return this.generateJavaStatement(it);
    };
    String _join = IterableExtensions.join(ListExtensions.<SelfCheckoutExperience, String>map(program.getSelfCheckoutExperience(), _function), "\n");
    _builder.append(_join, "\t\t\t\t");
    _builder.newLineIfNotEmpty();
    _builder.append("\t\t\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("};");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.newLine();
    _builder.append("\t\t");
    _builder.append("sc.run();");
    _builder.newLine();
    _builder.append("\t");
    _builder.append("}");
    _builder.newLine();
    _builder.append("}");
    _builder.newLine();
    return _builder;
  }
  
  protected String _generateJavaStatement(final SelfCheckoutExperience sci) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"You have started your exp\");");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final SelfCheckoutInstore sci) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"You have entered the store\");");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final MoveStatement smnt) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Move ");
    String _firstUpper = StringExtensions.toFirstUpper(smnt.getCommand().getName());
    _builder.append(_firstUpper);
    _builder.append(" (6);");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final HoldSelfScanner sci) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"Self Checkout Scanner aquired\");");
    return _builder.toString();
  }
  
  protected String _generateJavaStatement(final SelfCheckoutOnline online) {
    StringConcatenation _builder = new StringConcatenation();
    _builder.append("System.out.println(\"You have loggined in\");");
    return _builder.toString();
  }
  
  public String generateJavaStatement(final EObject smnt) {
    if (smnt instanceof MoveStatement) {
      return _generateJavaStatement((MoveStatement)smnt);
    } else if (smnt instanceof SelfCheckoutInstore) {
      return _generateJavaStatement((SelfCheckoutInstore)smnt);
    } else if (smnt instanceof SelfCheckoutOnline) {
      return _generateJavaStatement((SelfCheckoutOnline)smnt);
    } else if (smnt instanceof HoldSelfScanner) {
      return _generateJavaStatement((HoldSelfScanner)smnt);
    } else if (smnt instanceof SelfCheckoutExperience) {
      return _generateJavaStatement((SelfCheckoutExperience)smnt);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(smnt).toString());
    }
  }
}
