/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.scoping;

import com.google.common.collect.Iterables;
import java.util.Arrays;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EReference;
import org.eclipse.xtext.scoping.IScope;
import org.eclipse.xtext.scoping.Scopes;
import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider;
import self_checkout_experience.selfCheckoutExperience.IntExpression;
import self_checkout_experience.selfCheckoutExperience.IntVarExpression;
import self_checkout_experience.selfCheckoutExperience.Repeat;
import self_checkout_experience.selfCheckoutExperience.Self_checkout;
import self_checkout_experience.selfCheckoutExperience.VariableDeclaration;

/**
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 * 
 * /
 * generated by Xtext 2.18.0.M3
 */
@SuppressWarnings("all")
public class SelfCheckoutExperienceScopeProvider extends AbstractDeclarativeScopeProvider {
  public IScope scope_IntVarExpression_var(final IntVarExpression context, final EReference ref) {
    return this.visibleVariablesScope(context);
  }
  
  protected IScope _visibleVariablesScope(final IntExpression ip) {
    return this.visibleVariablesScope(ip.eContainer());
  }
  
  protected IScope _visibleVariablesScope(final Self_checkout tp) {
    return Scopes.scopeFor(Iterables.<VariableDeclaration>filter(tp.getSelfCheckoutExperience(), VariableDeclaration.class));
  }
  
  protected IScope _visibleVariablesScope(final Repeat ls) {
    return this.internalVisibleVariablesScope(ls.eContainer());
  }
  
  protected IScope _internalVisibleVariablesScope(final Self_checkout tp) {
    return Scopes.scopeFor(Iterables.<VariableDeclaration>filter(tp.getSelfCheckoutExperience(), VariableDeclaration.class));
  }
  
  protected IScope _internalVisibleVariablesScope(final Repeat ls) {
    return Scopes.scopeFor(Iterables.<VariableDeclaration>filter(ls.getStatement(), VariableDeclaration.class), this.internalVisibleVariablesScope(ls.eContainer()));
  }
  
  public IScope visibleVariablesScope(final EObject ls) {
    if (ls instanceof Repeat) {
      return _visibleVariablesScope((Repeat)ls);
    } else if (ls instanceof IntExpression) {
      return _visibleVariablesScope((IntExpression)ls);
    } else if (ls instanceof Self_checkout) {
      return _visibleVariablesScope((Self_checkout)ls);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ls).toString());
    }
  }
  
  public IScope internalVisibleVariablesScope(final EObject ls) {
    if (ls instanceof Repeat) {
      return _internalVisibleVariablesScope((Repeat)ls);
    } else if (ls instanceof Self_checkout) {
      return _internalVisibleVariablesScope((Self_checkout)ls);
    } else {
      throw new IllegalArgumentException("Unhandled parameter types: " +
        Arrays.<Object>asList(ls).toString());
    }
  }
}
