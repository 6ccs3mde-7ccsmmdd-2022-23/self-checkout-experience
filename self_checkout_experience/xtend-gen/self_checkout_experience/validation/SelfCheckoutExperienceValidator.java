/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.validation;

import java.util.List;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.validation.Check;
import org.eclipse.xtext.validation.CheckType;
import org.eclipse.xtext.xbase.lib.CollectionLiterals;
import self_checkout_experience.selfCheckoutExperience.ItemDef;
import self_checkout_experience.selfCheckoutExperience.PickStatement;
import self_checkout_experience.selfCheckoutExperience.SelfCheckoutExperiencePackage;
import self_checkout_experience.selfCheckoutExperience.VariableDeclaration;

/**
 * This class contains custom validation rules.
 * 
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#validation
 */
@SuppressWarnings("all")
public class SelfCheckoutExperienceValidator extends AbstractSelfCheckoutExperienceValidator {
  public static final String INVALID_VARIABLE_NAME = "self_checkout_experience.selfCheckoutExperience.INVALID_VARIABLE_NAME";
  
  public static final String INVALID_ITEM_NAME = "self_checkout_experience.selfCheckoutExperience.INVALID_ITEM_NAME";
  
  public static final String INVALID_ITEM_PLURAL = "self_checkout_experience.selfCheckoutExperience.INVALID_ITEM_PLURAL";
  
  public static final String INVALID_ITEM_BOUGHT = "self_checkout_experience.selfCheckoutExperience.INVALID_ITEM_BOUGHT";
  
  public static final String MAY_NOT_BASKET_UP = "self_checkout_experience.selfCheckoutExperience.MAY_NOT_BASKET_UP";
  
  public static final String INVALID_HOLDING_ITEM_ACTION = "self_checkout_experience.selfCheckoutExperience.INVALID_HOLDING_ITEM_ACTION";
  
  @Check
  public void checkVariableNamesStartWithLowerCase(final VariableDeclaration decl) {
    boolean _isLowerCase = Character.isLowerCase(decl.getName().charAt(0));
    boolean _not = (!_isLowerCase);
    if (_not) {
      this.warning("Name should start with a lower-case character", decl, 
        SelfCheckoutExperiencePackage.Literals.VARIABLE_DECLARATION__NAME, SelfCheckoutExperienceValidator.INVALID_VARIABLE_NAME);
    }
  }
  
  @Check
  public void checkItemsStartWithUpperCase(final ItemDef item) {
    boolean _isUpperCase = Character.isUpperCase(item.getName().charAt(0));
    boolean _not = (!_isUpperCase);
    if (_not) {
      this.warning("Item should start with a upper-case character", item, 
        SelfCheckoutExperiencePackage.Literals.ITEM_DEF__NAME, SelfCheckoutExperienceValidator.INVALID_ITEM_NAME);
    }
  }
  
  @Check(CheckType.NORMAL)
  public void checkNotSoldItemsAtSelfCheckout(final ItemDef item) {
    List<String> notSoldItemsList = CollectionLiterals.<String>newArrayList();
    notSoldItemsList.add("car");
    notSoldItemsList.add("house");
    notSoldItemsList.add("plane");
    notSoldItemsList.add("human");
    notSoldItemsList.add("university");
    notSoldItemsList.add("grade");
    notSoldItemsList.add("wall");
    notSoldItemsList.add("homework");
    boolean _contains = notSoldItemsList.contains(item.getName().toString().toLowerCase());
    if (_contains) {
      this.warning("Item is not purchasable at self checkout!", item, 
        SelfCheckoutExperiencePackage.Literals.ITEM_DEF__NAME, SelfCheckoutExperienceValidator.INVALID_ITEM_BOUGHT);
    }
  }
  
  @Check
  public void checkAddToBasketOrDropComesAfterPick(final PickStatement pickStmn) {
    EObject _holdingItem = pickStmn.getHoldingItem();
    boolean _tripleEquals = (_holdingItem == null);
    if (_tripleEquals) {
      this.warning("Holding item needs assignment", pickStmn, 
        SelfCheckoutExperiencePackage.Literals.PICK_STATEMENT__HOLDING_ITEM, 
        SelfCheckoutExperienceValidator.INVALID_HOLDING_ITEM_ACTION);
    }
  }
}
