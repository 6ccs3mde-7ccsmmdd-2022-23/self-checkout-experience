grammar self_checkout_experience.SelfCheckoutExperience with org.eclipse.xtext.common.Terminals

generate selfCheckoutExperience "http://www.SelfCheckoutExperience.self_checkout_experience"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore



Self_checkout:
	(pickstatements+=PickStatement | walkstatements += WalkStatement)*
	checkout = Checkout?
;	
	
PickStatement:
	"pick" "up" itemCount = Addition itemPicked = ItemDef
	holdingItem = (AddToBasket | Drop)
;

ItemDef:
	name = ID
;

AddToBasket:
	"add" "to" "basket" itemInBasket=[ItemDef]
;

Drop:
	"drop" itemDropped=[ItemDef]
;


WalkStatement:
	MoveStatement |
	TurnStatement |
	Repeat |
	VariableDeclaration
;


VariableDeclaration:
	"var" name=ID "=" value=INT
;

Repeat:
	"repeat" count = Addition "times:" 
	  statements += (WalkStatement | PickStatement)+
	"end"
;

MoveStatement:
	command = MoveCommand "(" steps = Addition ")"
;

enum MoveCommand:
	forward | backward
;

TurnStatement:
	"turn" command = TurnCommand
;

enum TurnCommand:
	left | right
;

Addition returns Expression:
	Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
;

Multiplication returns Expression:
	Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
;

Primary returns Expression:
	IntLiteral |
	IntVarExpression |
	"(" Addition ")"
;

IntLiteral:
	val = INT
;

IntVarExpression:
	var = [VariableDeclaration]
;

Checkout:
	"go" "to" "till"
	scan += Scan+
	pay = Pay
;

Scan:
	"scan" "at" "till" name=ID
	addToBag += AddToBag*
;

AddToBag:
	"add" "to" "bag" bagItem=[Scan]
;

enum Pay:
	pay
;
