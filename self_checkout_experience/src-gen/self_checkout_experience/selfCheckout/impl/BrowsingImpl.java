/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.selfCheckout.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import self_checkout_experience.selfCheckout.Browsing;
import self_checkout_experience.selfCheckout.Choose;
import self_checkout_experience.selfCheckout.SelfCheckoutPackage;
import self_checkout_experience.selfCheckout.WalkStatement;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Browsing</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link self_checkout_experience.selfCheckout.impl.BrowsingImpl#getChoose <em>Choose</em>}</li>
 *   <li>{@link self_checkout_experience.selfCheckout.impl.BrowsingImpl#getWalkstatements <em>Walkstatements</em>}</li>
 * </ul>
 *
 * @generated
 */
public class BrowsingImpl extends MinimalEObjectImpl.Container implements Browsing
{
  /**
   * The cached value of the '{@link #getChoose() <em>Choose</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getChoose()
   * @generated
   * @ordered
   */
  protected Choose choose;

  /**
   * The cached value of the '{@link #getWalkstatements() <em>Walkstatements</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getWalkstatements()
   * @generated
   * @ordered
   */
  protected EList<WalkStatement> walkstatements;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected BrowsingImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SelfCheckoutPackage.Literals.BROWSING;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Choose getChoose()
  {
    return choose;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetChoose(Choose newChoose, NotificationChain msgs)
  {
    Choose oldChoose = choose;
    choose = newChoose;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelfCheckoutPackage.BROWSING__CHOOSE, oldChoose, newChoose);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setChoose(Choose newChoose)
  {
    if (newChoose != choose)
    {
      NotificationChain msgs = null;
      if (choose != null)
        msgs = ((InternalEObject)choose).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelfCheckoutPackage.BROWSING__CHOOSE, null, msgs);
      if (newChoose != null)
        msgs = ((InternalEObject)newChoose).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelfCheckoutPackage.BROWSING__CHOOSE, null, msgs);
      msgs = basicSetChoose(newChoose, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelfCheckoutPackage.BROWSING__CHOOSE, newChoose, newChoose));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<WalkStatement> getWalkstatements()
  {
    if (walkstatements == null)
    {
      walkstatements = new EObjectContainmentEList<WalkStatement>(WalkStatement.class, this, SelfCheckoutPackage.BROWSING__WALKSTATEMENTS);
    }
    return walkstatements;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.BROWSING__CHOOSE:
        return basicSetChoose(null, msgs);
      case SelfCheckoutPackage.BROWSING__WALKSTATEMENTS:
        return ((InternalEList<?>)getWalkstatements()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.BROWSING__CHOOSE:
        return getChoose();
      case SelfCheckoutPackage.BROWSING__WALKSTATEMENTS:
        return getWalkstatements();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.BROWSING__CHOOSE:
        setChoose((Choose)newValue);
        return;
      case SelfCheckoutPackage.BROWSING__WALKSTATEMENTS:
        getWalkstatements().clear();
        getWalkstatements().addAll((Collection<? extends WalkStatement>)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.BROWSING__CHOOSE:
        setChoose((Choose)null);
        return;
      case SelfCheckoutPackage.BROWSING__WALKSTATEMENTS:
        getWalkstatements().clear();
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.BROWSING__CHOOSE:
        return choose != null;
      case SelfCheckoutPackage.BROWSING__WALKSTATEMENTS:
        return walkstatements != null && !walkstatements.isEmpty();
    }
    return super.eIsSet(featureID);
  }

} //BrowsingImpl
