/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.selfCheckout.impl;

import java.util.Collection;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.common.util.EList;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import org.eclipse.emf.ecore.util.EObjectContainmentEList;
import org.eclipse.emf.ecore.util.InternalEList;

import self_checkout_experience.selfCheckout.Checkout;
import self_checkout_experience.selfCheckout.Pay;
import self_checkout_experience.selfCheckout.Scan;
import self_checkout_experience.selfCheckout.SelfCheckoutPackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Checkout</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link self_checkout_experience.selfCheckout.impl.CheckoutImpl#getScan <em>Scan</em>}</li>
 *   <li>{@link self_checkout_experience.selfCheckout.impl.CheckoutImpl#getPay <em>Pay</em>}</li>
 * </ul>
 *
 * @generated
 */
public class CheckoutImpl extends MinimalEObjectImpl.Container implements Checkout
{
  /**
   * The cached value of the '{@link #getScan() <em>Scan</em>}' containment reference list.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getScan()
   * @generated
   * @ordered
   */
  protected EList<Scan> scan;

  /**
   * The default value of the '{@link #getPay() <em>Pay</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPay()
   * @generated
   * @ordered
   */
  protected static final Pay PAY_EDEFAULT = Pay.PAY;

  /**
   * The cached value of the '{@link #getPay() <em>Pay</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getPay()
   * @generated
   * @ordered
   */
  protected Pay pay = PAY_EDEFAULT;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected CheckoutImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SelfCheckoutPackage.Literals.CHECKOUT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EList<Scan> getScan()
  {
    if (scan == null)
    {
      scan = new EObjectContainmentEList<Scan>(Scan.class, this, SelfCheckoutPackage.CHECKOUT__SCAN);
    }
    return scan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Pay getPay()
  {
    return pay;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setPay(Pay newPay)
  {
    Pay oldPay = pay;
    pay = newPay == null ? PAY_EDEFAULT : newPay;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelfCheckoutPackage.CHECKOUT__PAY, oldPay, pay));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.CHECKOUT__SCAN:
        return ((InternalEList<?>)getScan()).basicRemove(otherEnd, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.CHECKOUT__SCAN:
        return getScan();
      case SelfCheckoutPackage.CHECKOUT__PAY:
        return getPay();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @SuppressWarnings("unchecked")
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.CHECKOUT__SCAN:
        getScan().clear();
        getScan().addAll((Collection<? extends Scan>)newValue);
        return;
      case SelfCheckoutPackage.CHECKOUT__PAY:
        setPay((Pay)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.CHECKOUT__SCAN:
        getScan().clear();
        return;
      case SelfCheckoutPackage.CHECKOUT__PAY:
        setPay(PAY_EDEFAULT);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SelfCheckoutPackage.CHECKOUT__SCAN:
        return scan != null && !scan.isEmpty();
      case SelfCheckoutPackage.CHECKOUT__PAY:
        return pay != PAY_EDEFAULT;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (pay: ");
    result.append(pay);
    result.append(')');
    return result.toString();
  }

} //CheckoutImpl
