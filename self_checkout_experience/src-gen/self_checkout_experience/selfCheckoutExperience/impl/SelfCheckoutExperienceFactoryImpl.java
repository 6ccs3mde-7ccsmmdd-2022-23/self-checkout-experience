/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.selfCheckoutExperience.impl;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.EDataType;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.ecore.EPackage;

import org.eclipse.emf.ecore.impl.EFactoryImpl;

import org.eclipse.emf.ecore.plugin.EcorePlugin;

import self_checkout_experience.selfCheckoutExperience.*;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model <b>Factory</b>.
 * <!-- end-user-doc -->
 * @generated
 */
public class SelfCheckoutExperienceFactoryImpl extends EFactoryImpl implements SelfCheckoutExperienceFactory
{
  /**
   * Creates the default factory implementation.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public static SelfCheckoutExperienceFactory init()
  {
    try
    {
      SelfCheckoutExperienceFactory theSelfCheckoutExperienceFactory = (SelfCheckoutExperienceFactory)EPackage.Registry.INSTANCE.getEFactory(SelfCheckoutExperiencePackage.eNS_URI);
      if (theSelfCheckoutExperienceFactory != null)
      {
        return theSelfCheckoutExperienceFactory;
      }
    }
    catch (Exception exception)
    {
      EcorePlugin.INSTANCE.log(exception);
    }
    return new SelfCheckoutExperienceFactoryImpl();
  }

  /**
   * Creates an instance of the factory.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public SelfCheckoutExperienceFactoryImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public EObject create(EClass eClass)
  {
    switch (eClass.getClassifierID())
    {
      case SelfCheckoutExperiencePackage.SELF_CHECKOUT: return createSelf_checkout();
      case SelfCheckoutExperiencePackage.PICK_STATEMENT: return createPickStatement();
      case SelfCheckoutExperiencePackage.ADD_TO_BASKET: return createAddToBasket();
      case SelfCheckoutExperiencePackage.DROP: return createDrop();
      case SelfCheckoutExperiencePackage.WALK_STATEMENT: return createWalkStatement();
      case SelfCheckoutExperiencePackage.VARIABLE_DECLARATION: return createVariableDeclaration();
      case SelfCheckoutExperiencePackage.REPEAT: return createRepeat();
      case SelfCheckoutExperiencePackage.MOVE_STATEMENT: return createMoveStatement();
      case SelfCheckoutExperiencePackage.TURN_STATEMENT: return createTurnStatement();
      case SelfCheckoutExperiencePackage.EXPRESSION: return createExpression();
      case SelfCheckoutExperiencePackage.INT_LITERAL: return createIntLiteral();
      case SelfCheckoutExperiencePackage.INT_VAR_EXPRESSION: return createIntVarExpression();
      case SelfCheckoutExperiencePackage.CHECKOUT: return createCheckout();
      case SelfCheckoutExperiencePackage.SCAN: return createScan();
      case SelfCheckoutExperiencePackage.ADD_TO_BAG: return createAddToBag();
      case SelfCheckoutExperiencePackage.ADDITION: return createAddition();
      case SelfCheckoutExperiencePackage.MULTIPLICATION: return createMultiplication();
      default:
        throw new IllegalArgumentException("The class '" + eClass.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object createFromString(EDataType eDataType, String initialValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SelfCheckoutExperiencePackage.MOVE_COMMAND:
        return createMoveCommandFromString(eDataType, initialValue);
      case SelfCheckoutExperiencePackage.TURN_COMMAND:
        return createTurnCommandFromString(eDataType, initialValue);
      case SelfCheckoutExperiencePackage.PAY:
        return createPayFromString(eDataType, initialValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String convertToString(EDataType eDataType, Object instanceValue)
  {
    switch (eDataType.getClassifierID())
    {
      case SelfCheckoutExperiencePackage.MOVE_COMMAND:
        return convertMoveCommandToString(eDataType, instanceValue);
      case SelfCheckoutExperiencePackage.TURN_COMMAND:
        return convertTurnCommandToString(eDataType, instanceValue);
      case SelfCheckoutExperiencePackage.PAY:
        return convertPayToString(eDataType, instanceValue);
      default:
        throw new IllegalArgumentException("The datatype '" + eDataType.getName() + "' is not a valid classifier");
    }
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Self_checkout createSelf_checkout()
  {
    Self_checkoutImpl self_checkout = new Self_checkoutImpl();
    return self_checkout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public PickStatement createPickStatement()
  {
    PickStatementImpl pickStatement = new PickStatementImpl();
    return pickStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddToBasket createAddToBasket()
  {
    AddToBasketImpl addToBasket = new AddToBasketImpl();
    return addToBasket;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Drop createDrop()
  {
    DropImpl drop = new DropImpl();
    return drop;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public WalkStatement createWalkStatement()
  {
    WalkStatementImpl walkStatement = new WalkStatementImpl();
    return walkStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public VariableDeclaration createVariableDeclaration()
  {
    VariableDeclarationImpl variableDeclaration = new VariableDeclarationImpl();
    return variableDeclaration;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Repeat createRepeat()
  {
    RepeatImpl repeat = new RepeatImpl();
    return repeat;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public MoveStatement createMoveStatement()
  {
    MoveStatementImpl moveStatement = new MoveStatementImpl();
    return moveStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public TurnStatement createTurnStatement()
  {
    TurnStatementImpl turnStatement = new TurnStatementImpl();
    return turnStatement;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Expression createExpression()
  {
    ExpressionImpl expression = new ExpressionImpl();
    return expression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntLiteral createIntLiteral()
  {
    IntLiteralImpl intLiteral = new IntLiteralImpl();
    return intLiteral;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public IntVarExpression createIntVarExpression()
  {
    IntVarExpressionImpl intVarExpression = new IntVarExpressionImpl();
    return intVarExpression;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Checkout createCheckout()
  {
    CheckoutImpl checkout = new CheckoutImpl();
    return checkout;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Scan createScan()
  {
    ScanImpl scan = new ScanImpl();
    return scan;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public AddToBag createAddToBag()
  {
    AddToBagImpl addToBag = new AddToBagImpl();
    return addToBag;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Addition createAddition()
  {
    AdditionImpl addition = new AdditionImpl();
    return addition;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Multiplication createMultiplication()
  {
    MultiplicationImpl multiplication = new MultiplicationImpl();
    return multiplication;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public MoveCommand createMoveCommandFromString(EDataType eDataType, String initialValue)
  {
    MoveCommand result = MoveCommand.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertMoveCommandToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public TurnCommand createTurnCommandFromString(EDataType eDataType, String initialValue)
  {
    TurnCommand result = TurnCommand.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertTurnCommandToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public Pay createPayFromString(EDataType eDataType, String initialValue)
  {
    Pay result = Pay.get(initialValue);
    if (result == null) throw new IllegalArgumentException("The value '" + initialValue + "' is not a valid enumerator of '" + eDataType.getName() + "'");
    return result;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public String convertPayToString(EDataType eDataType, Object instanceValue)
  {
    return instanceValue == null ? null : instanceValue.toString();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public SelfCheckoutExperiencePackage getSelfCheckoutExperiencePackage()
  {
    return (SelfCheckoutExperiencePackage)getEPackage();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @deprecated
   * @generated
   */
  @Deprecated
  public static SelfCheckoutExperiencePackage getPackage()
  {
    return SelfCheckoutExperiencePackage.eINSTANCE;
  }

} //SelfCheckoutExperienceFactoryImpl
