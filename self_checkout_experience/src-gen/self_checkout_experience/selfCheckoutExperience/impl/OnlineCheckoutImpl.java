/**
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.selfCheckoutExperience.impl;

import org.eclipse.emf.common.notify.Notification;
import org.eclipse.emf.common.notify.NotificationChain;

import org.eclipse.emf.ecore.EClass;
import org.eclipse.emf.ecore.InternalEObject;

import org.eclipse.emf.ecore.impl.ENotificationImpl;
import org.eclipse.emf.ecore.impl.MinimalEObjectImpl;

import self_checkout_experience.selfCheckoutExperience.Confirm;
import self_checkout_experience.selfCheckoutExperience.DeliveryOptions;
import self_checkout_experience.selfCheckoutExperience.OnlineCheckout;
import self_checkout_experience.selfCheckoutExperience.SelfCheckoutExperiencePackage;

/**
 * <!-- begin-user-doc -->
 * An implementation of the model object '<em><b>Online Checkout</b></em>'.
 * <!-- end-user-doc -->
 * <p>
 * The following features are implemented:
 * </p>
 * <ul>
 *   <li>{@link self_checkout_experience.selfCheckoutExperience.impl.OnlineCheckoutImpl#getDeliveryOptions <em>Delivery Options</em>}</li>
 *   <li>{@link self_checkout_experience.selfCheckoutExperience.impl.OnlineCheckoutImpl#getConfirm <em>Confirm</em>}</li>
 * </ul>
 *
 * @generated
 */
public class OnlineCheckoutImpl extends MinimalEObjectImpl.Container implements OnlineCheckout
{
  /**
   * The default value of the '{@link #getDeliveryOptions() <em>Delivery Options</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeliveryOptions()
   * @generated
   * @ordered
   */
  protected static final DeliveryOptions DELIVERY_OPTIONS_EDEFAULT = DeliveryOptions.PREMIUM_DELIVERY;

  /**
   * The cached value of the '{@link #getDeliveryOptions() <em>Delivery Options</em>}' attribute.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getDeliveryOptions()
   * @generated
   * @ordered
   */
  protected DeliveryOptions deliveryOptions = DELIVERY_OPTIONS_EDEFAULT;

  /**
   * The cached value of the '{@link #getConfirm() <em>Confirm</em>}' containment reference.
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @see #getConfirm()
   * @generated
   * @ordered
   */
  protected Confirm confirm;

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  protected OnlineCheckoutImpl()
  {
    super();
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  protected EClass eStaticClass()
  {
    return SelfCheckoutExperiencePackage.Literals.ONLINE_CHECKOUT;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public DeliveryOptions getDeliveryOptions()
  {
    return deliveryOptions;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setDeliveryOptions(DeliveryOptions newDeliveryOptions)
  {
    DeliveryOptions oldDeliveryOptions = deliveryOptions;
    deliveryOptions = newDeliveryOptions == null ? DELIVERY_OPTIONS_EDEFAULT : newDeliveryOptions;
    if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__DELIVERY_OPTIONS, oldDeliveryOptions, deliveryOptions));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Confirm getConfirm()
  {
    return confirm;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  public NotificationChain basicSetConfirm(Confirm newConfirm, NotificationChain msgs)
  {
    Confirm oldConfirm = confirm;
    confirm = newConfirm;
    if (eNotificationRequired())
    {
      ENotificationImpl notification = new ENotificationImpl(this, Notification.SET, SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM, oldConfirm, newConfirm);
      if (msgs == null) msgs = notification; else msgs.add(notification);
    }
    return msgs;
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void setConfirm(Confirm newConfirm)
  {
    if (newConfirm != confirm)
    {
      NotificationChain msgs = null;
      if (confirm != null)
        msgs = ((InternalEObject)confirm).eInverseRemove(this, EOPPOSITE_FEATURE_BASE - SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM, null, msgs);
      if (newConfirm != null)
        msgs = ((InternalEObject)newConfirm).eInverseAdd(this, EOPPOSITE_FEATURE_BASE - SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM, null, msgs);
      msgs = basicSetConfirm(newConfirm, msgs);
      if (msgs != null) msgs.dispatch();
    }
    else if (eNotificationRequired())
      eNotify(new ENotificationImpl(this, Notification.SET, SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM, newConfirm, newConfirm));
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public NotificationChain eInverseRemove(InternalEObject otherEnd, int featureID, NotificationChain msgs)
  {
    switch (featureID)
    {
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM:
        return basicSetConfirm(null, msgs);
    }
    return super.eInverseRemove(otherEnd, featureID, msgs);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public Object eGet(int featureID, boolean resolve, boolean coreType)
  {
    switch (featureID)
    {
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__DELIVERY_OPTIONS:
        return getDeliveryOptions();
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM:
        return getConfirm();
    }
    return super.eGet(featureID, resolve, coreType);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eSet(int featureID, Object newValue)
  {
    switch (featureID)
    {
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__DELIVERY_OPTIONS:
        setDeliveryOptions((DeliveryOptions)newValue);
        return;
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM:
        setConfirm((Confirm)newValue);
        return;
    }
    super.eSet(featureID, newValue);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public void eUnset(int featureID)
  {
    switch (featureID)
    {
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__DELIVERY_OPTIONS:
        setDeliveryOptions(DELIVERY_OPTIONS_EDEFAULT);
        return;
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM:
        setConfirm((Confirm)null);
        return;
    }
    super.eUnset(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public boolean eIsSet(int featureID)
  {
    switch (featureID)
    {
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__DELIVERY_OPTIONS:
        return deliveryOptions != DELIVERY_OPTIONS_EDEFAULT;
      case SelfCheckoutExperiencePackage.ONLINE_CHECKOUT__CONFIRM:
        return confirm != null;
    }
    return super.eIsSet(featureID);
  }

  /**
   * <!-- begin-user-doc -->
   * <!-- end-user-doc -->
   * @generated
   */
  @Override
  public String toString()
  {
    if (eIsProxy()) return super.toString();

    StringBuilder result = new StringBuilder(super.toString());
    result.append(" (deliveryOptions: ");
    result.append(deliveryOptions);
    result.append(')');
    return result.toString();
  }

} //OnlineCheckoutImpl
