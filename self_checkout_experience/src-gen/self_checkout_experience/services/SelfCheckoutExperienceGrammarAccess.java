/*
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SelfCheckoutExperienceGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class Self_checkoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Self_checkout");
		private final Assignment cSelfCheckoutExperienceAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cSelfCheckoutExperienceSelfCheckoutExperienceParserRuleCall_0 = (RuleCall)cSelfCheckoutExperienceAssignment.eContents().get(0);
		
		//Self_checkout:
		//    selfCheckoutExperience+=SelfCheckoutExperience*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//selfCheckoutExperience+=SelfCheckoutExperience*
		public Assignment getSelfCheckoutExperienceAssignment() { return cSelfCheckoutExperienceAssignment; }
		
		//SelfCheckoutExperience
		public RuleCall getSelfCheckoutExperienceSelfCheckoutExperienceParserRuleCall_0() { return cSelfCheckoutExperienceSelfCheckoutExperienceParserRuleCall_0; }
	}
	public class SelfCheckoutExperienceElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.SelfCheckoutExperience");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cSelfCheckoutOnlineParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cSelfCheckoutInstoreParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		
		//SelfCheckoutExperience:
		//    SelfCheckoutOnline | SelfCheckoutInstore
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//SelfCheckoutOnline | SelfCheckoutInstore
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//SelfCheckoutOnline
		public RuleCall getSelfCheckoutOnlineParserRuleCall_0() { return cSelfCheckoutOnlineParserRuleCall_0; }
		
		//SelfCheckoutInstore
		public RuleCall getSelfCheckoutInstoreParserRuleCall_1() { return cSelfCheckoutInstoreParserRuleCall_1; }
	}
	public class SelfCheckoutOnlineElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.SelfCheckoutOnline");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cLoadShoppingSiteAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cLoadShoppingSiteLoadShoppingSiteEnumRuleCall_0_0 = (RuleCall)cLoadShoppingSiteAssignment_0.eContents().get(0);
		private final Assignment cSearchAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cSearchSearchParserRuleCall_1_0 = (RuleCall)cSearchAssignment_1.eContents().get(0);
		private final Assignment cOnlineCheckoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cOnlineCheckoutOnlineCheckoutParserRuleCall_2_0 = (RuleCall)cOnlineCheckoutAssignment_2.eContents().get(0);
		
		///////////////////////////////////////////////////////////////////ONLINE SELF-CHECKOUT/////////////////////////////////////////////////////////////////////
		//SelfCheckoutOnline:
		//    loadShoppingSite=LoadShoppingSite
		//    search+=Search*
		//    onlineCheckout=OnlineCheckout?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//loadShoppingSite=LoadShoppingSite
		//search+=Search*
		//onlineCheckout=OnlineCheckout?
		public Group getGroup() { return cGroup; }
		
		//loadShoppingSite=LoadShoppingSite
		public Assignment getLoadShoppingSiteAssignment_0() { return cLoadShoppingSiteAssignment_0; }
		
		//LoadShoppingSite
		public RuleCall getLoadShoppingSiteLoadShoppingSiteEnumRuleCall_0_0() { return cLoadShoppingSiteLoadShoppingSiteEnumRuleCall_0_0; }
		
		//search+=Search*
		public Assignment getSearchAssignment_1() { return cSearchAssignment_1; }
		
		//Search
		public RuleCall getSearchSearchParserRuleCall_1_0() { return cSearchSearchParserRuleCall_1_0; }
		
		//onlineCheckout=OnlineCheckout?
		public Assignment getOnlineCheckoutAssignment_2() { return cOnlineCheckoutAssignment_2; }
		
		//OnlineCheckout
		public RuleCall getOnlineCheckoutOnlineCheckoutParserRuleCall_2_0() { return cOnlineCheckoutOnlineCheckoutParserRuleCall_2_0; }
	}
	public class SearchElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Search");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cSearchKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cForKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemSearchAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemSearchItemDefParserRuleCall_2_0 = (RuleCall)cItemSearchAssignment_2.eContents().get(0);
		private final Assignment cAddToOnlineBasketAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cAddToOnlineBasketAddToOnlineBasketParserRuleCall_3_0 = (RuleCall)cAddToOnlineBasketAssignment_3.eContents().get(0);
		
		//Search:
		//    "search" "for" itemSearch=ItemDef
		//    addToOnlineBasket=AddToOnlineBasket?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"search" "for" itemSearch=ItemDef
		//addToOnlineBasket=AddToOnlineBasket?
		public Group getGroup() { return cGroup; }
		
		//"search"
		public Keyword getSearchKeyword_0() { return cSearchKeyword_0; }
		
		//"for"
		public Keyword getForKeyword_1() { return cForKeyword_1; }
		
		//itemSearch=ItemDef
		public Assignment getItemSearchAssignment_2() { return cItemSearchAssignment_2; }
		
		//ItemDef
		public RuleCall getItemSearchItemDefParserRuleCall_2_0() { return cItemSearchItemDefParserRuleCall_2_0; }
		
		//addToOnlineBasket=AddToOnlineBasket?
		public Assignment getAddToOnlineBasketAssignment_3() { return cAddToOnlineBasketAssignment_3; }
		
		//AddToOnlineBasket
		public RuleCall getAddToOnlineBasketAddToOnlineBasketParserRuleCall_3_0() { return cAddToOnlineBasketAddToOnlineBasketParserRuleCall_3_0; }
	}
	public class AddToOnlineBasketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.AddToOnlineBasket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBasketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Assignment cItemCountAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cItemCountAdditionParserRuleCall_4_0 = (RuleCall)cItemCountAssignment_4.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_5 = (Keyword)cGroup.eContents().get(5);
		private final Assignment cItemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final CrossReference cItemItemDefCrossReference_6_0 = (CrossReference)cItemAssignment_6.eContents().get(0);
		private final RuleCall cItemItemDefIDTerminalRuleCall_6_0_1 = (RuleCall)cItemItemDefCrossReference_6_0.eContents().get(1);
		private final Assignment cRemoveFromOnlineBasketAssignment_7 = (Assignment)cGroup.eContents().get(7);
		private final RuleCall cRemoveFromOnlineBasketRemoveFromOnlineBasketParserRuleCall_7_0 = (RuleCall)cRemoveFromOnlineBasketAssignment_7.eContents().get(0);
		
		//AddToOnlineBasket:
		////    "add" "to" "basket" itemCount = Addition item=[ItemDef]
		//    "add" "to" "basket" "(" itemCount = Addition ")" item=[ItemDef]
		//    removeFromOnlineBasket=RemoveFromOnlineBasket?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		////    "add" "to" "basket" itemCount = Addition item=[ItemDef]
		//    "add" "to" "basket" "(" itemCount = Addition ")" item=[ItemDef]
		//    removeFromOnlineBasket=RemoveFromOnlineBasket?
		public Group getGroup() { return cGroup; }
		
		////    "add" "to" "basket" itemCount = Addition item=[ItemDef]
		//    "add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"basket"
		public Keyword getBasketKeyword_2() { return cBasketKeyword_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_3() { return cLeftParenthesisKeyword_3; }
		
		//itemCount = Addition
		public Assignment getItemCountAssignment_4() { return cItemCountAssignment_4; }
		
		//Addition
		public RuleCall getItemCountAdditionParserRuleCall_4_0() { return cItemCountAdditionParserRuleCall_4_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_5() { return cRightParenthesisKeyword_5; }
		
		//item=[ItemDef]
		public Assignment getItemAssignment_6() { return cItemAssignment_6; }
		
		//[ItemDef]
		public CrossReference getItemItemDefCrossReference_6_0() { return cItemItemDefCrossReference_6_0; }
		
		//ID
		public RuleCall getItemItemDefIDTerminalRuleCall_6_0_1() { return cItemItemDefIDTerminalRuleCall_6_0_1; }
		
		//removeFromOnlineBasket=RemoveFromOnlineBasket?
		public Assignment getRemoveFromOnlineBasketAssignment_7() { return cRemoveFromOnlineBasketAssignment_7; }
		
		//RemoveFromOnlineBasket
		public RuleCall getRemoveFromOnlineBasketRemoveFromOnlineBasketParserRuleCall_7_0() { return cRemoveFromOnlineBasketRemoveFromOnlineBasketParserRuleCall_7_0; }
	}
	public class RemoveFromOnlineBasketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.RemoveFromOnlineBasket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRemoveKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cFromKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBasketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cRemoveItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cRemoveItemItemDefCrossReference_3_0 = (CrossReference)cRemoveItemAssignment_3.eContents().get(0);
		private final RuleCall cRemoveItemItemDefIDTerminalRuleCall_3_0_1 = (RuleCall)cRemoveItemItemDefCrossReference_3_0.eContents().get(1);
		
		//RemoveFromOnlineBasket:
		//    "remove" "from" "basket" removeItem=[ItemDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"remove" "from" "basket" removeItem=[ItemDef]
		public Group getGroup() { return cGroup; }
		
		//"remove"
		public Keyword getRemoveKeyword_0() { return cRemoveKeyword_0; }
		
		//"from"
		public Keyword getFromKeyword_1() { return cFromKeyword_1; }
		
		//"basket"
		public Keyword getBasketKeyword_2() { return cBasketKeyword_2; }
		
		//removeItem=[ItemDef]
		public Assignment getRemoveItemAssignment_3() { return cRemoveItemAssignment_3; }
		
		//[ItemDef]
		public CrossReference getRemoveItemItemDefCrossReference_3_0() { return cRemoveItemItemDefCrossReference_3_0; }
		
		//ID
		public RuleCall getRemoveItemItemDefIDTerminalRuleCall_3_0_1() { return cRemoveItemItemDefIDTerminalRuleCall_3_0_1; }
	}
	public class OnlineCheckoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.OnlineCheckout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cCheckoutKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cDeliveryOptionsAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cDeliveryOptionsDeliveryOptionsEnumRuleCall_1_0 = (RuleCall)cDeliveryOptionsAssignment_1.eContents().get(0);
		private final Assignment cConfirmAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cConfirmConfirmParserRuleCall_2_0 = (RuleCall)cConfirmAssignment_2.eContents().get(0);
		
		//OnlineCheckout:
		//    "checkout"
		//    deliveryOptions=DeliveryOptions
		//    confirm=Confirm
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"checkout"
		//deliveryOptions=DeliveryOptions
		//confirm=Confirm
		public Group getGroup() { return cGroup; }
		
		//"checkout"
		public Keyword getCheckoutKeyword_0() { return cCheckoutKeyword_0; }
		
		//deliveryOptions=DeliveryOptions
		public Assignment getDeliveryOptionsAssignment_1() { return cDeliveryOptionsAssignment_1; }
		
		//DeliveryOptions
		public RuleCall getDeliveryOptionsDeliveryOptionsEnumRuleCall_1_0() { return cDeliveryOptionsDeliveryOptionsEnumRuleCall_1_0; }
		
		//confirm=Confirm
		public Assignment getConfirmAssignment_2() { return cConfirmAssignment_2; }
		
		//Confirm
		public RuleCall getConfirmConfirmParserRuleCall_2_0() { return cConfirmConfirmParserRuleCall_2_0; }
	}
	public class ConfirmElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Confirm");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cConfirmEnumAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cConfirmEnumConfirmEnumEnumRuleCall_0_0 = (RuleCall)cConfirmEnumAssignment_0.eContents().get(0);
		private final Assignment cPayAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cPayPayEnumRuleCall_1_0 = (RuleCall)cPayAssignment_1.eContents().get(0);
		
		//Confirm:
		//    confirmEnum=ConfirmEnum
		//    pay=Pay
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//confirmEnum=ConfirmEnum
		//pay=Pay
		public Group getGroup() { return cGroup; }
		
		//confirmEnum=ConfirmEnum
		public Assignment getConfirmEnumAssignment_0() { return cConfirmEnumAssignment_0; }
		
		//ConfirmEnum
		public RuleCall getConfirmEnumConfirmEnumEnumRuleCall_0_0() { return cConfirmEnumConfirmEnumEnumRuleCall_0_0; }
		
		//pay=Pay
		public Assignment getPayAssignment_1() { return cPayAssignment_1; }
		
		//Pay
		public RuleCall getPayPayEnumRuleCall_1_0() { return cPayPayEnumRuleCall_1_0; }
	}
	public class SelfCheckoutInstoreElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.SelfCheckoutInstore");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cPickScanMachineAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cPickScanMachineHoldSelfScannerParserRuleCall_0_0 = (RuleCall)cPickScanMachineAssignment_0.eContents().get(0);
		private final Assignment cStatementAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final Alternatives cStatementAlternatives_1_0 = (Alternatives)cStatementAssignment_1.eContents().get(0);
		private final RuleCall cStatementPickStatementParserRuleCall_1_0_0 = (RuleCall)cStatementAlternatives_1_0.eContents().get(0);
		private final RuleCall cStatementWalkStatementParserRuleCall_1_0_1 = (RuleCall)cStatementAlternatives_1_0.eContents().get(1);
		private final Assignment cCheckoutAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cCheckoutCheckoutParserRuleCall_2_0 = (RuleCall)cCheckoutAssignment_2.eContents().get(0);
		
		//////////////////////////////////////////////////////////////////IN-STORE SELF-CHECKOUT//////////////////////////////////////////////////////////////////////
		//SelfCheckoutInstore:
		//    pickScanMachine = HoldSelfScanner
		//    statement+=(PickStatement|WalkStatement)*
		//    checkout = Checkout?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//pickScanMachine = HoldSelfScanner
		//statement+=(PickStatement|WalkStatement)*
		//checkout = Checkout?
		public Group getGroup() { return cGroup; }
		
		//pickScanMachine = HoldSelfScanner
		public Assignment getPickScanMachineAssignment_0() { return cPickScanMachineAssignment_0; }
		
		//HoldSelfScanner
		public RuleCall getPickScanMachineHoldSelfScannerParserRuleCall_0_0() { return cPickScanMachineHoldSelfScannerParserRuleCall_0_0; }
		
		//statement+=(PickStatement|WalkStatement)*
		public Assignment getStatementAssignment_1() { return cStatementAssignment_1; }
		
		//(PickStatement|WalkStatement)
		public Alternatives getStatementAlternatives_1_0() { return cStatementAlternatives_1_0; }
		
		//PickStatement
		public RuleCall getStatementPickStatementParserRuleCall_1_0_0() { return cStatementPickStatementParserRuleCall_1_0_0; }
		
		//WalkStatement
		public RuleCall getStatementWalkStatementParserRuleCall_1_0_1() { return cStatementWalkStatementParserRuleCall_1_0_1; }
		
		//checkout = Checkout?
		public Assignment getCheckoutAssignment_2() { return cCheckoutAssignment_2; }
		
		//Checkout
		public RuleCall getCheckoutCheckoutParserRuleCall_2_0() { return cCheckoutCheckoutParserRuleCall_2_0; }
	}
	public class HoldSelfScannerElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.HoldSelfScanner");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cHoldKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cScanMachineAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cScanMachineSelfScannerEnumRuleCall_1_0 = (RuleCall)cScanMachineAssignment_1.eContents().get(0);
		
		//HoldSelfScanner:
		//    "hold" scanMachine = SelfScanner
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"hold" scanMachine = SelfScanner
		public Group getGroup() { return cGroup; }
		
		//"hold"
		public Keyword getHoldKeyword_0() { return cHoldKeyword_0; }
		
		//scanMachine = SelfScanner
		public Assignment getScanMachineAssignment_1() { return cScanMachineAssignment_1; }
		
		//SelfScanner
		public RuleCall getScanMachineSelfScannerEnumRuleCall_1_0() { return cScanMachineSelfScannerEnumRuleCall_1_0; }
	}
	public class PickStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.PickStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cLeftParenthesisKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemCountAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemCountAdditionParserRuleCall_3_0 = (RuleCall)cItemCountAssignment_3.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cItemPickedAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final RuleCall cItemPickedItemDefParserRuleCall_5_0 = (RuleCall)cItemPickedAssignment_5.eContents().get(0);
		private final Assignment cHoldingItemAssignment_6 = (Assignment)cGroup.eContents().get(6);
		private final Alternatives cHoldingItemAlternatives_6_0 = (Alternatives)cHoldingItemAssignment_6.eContents().get(0);
		private final RuleCall cHoldingItemScanAndAddToBasketParserRuleCall_6_0_0 = (RuleCall)cHoldingItemAlternatives_6_0.eContents().get(0);
		private final RuleCall cHoldingItemDropParserRuleCall_6_0_1 = (RuleCall)cHoldingItemAlternatives_6_0.eContents().get(1);
		
		//PickStatement:
		//    "pick" "up" "(" itemCount = Addition ")"  itemPicked = ItemDef
		//    holdingItem = (ScanAndAddToBasket | Drop)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"pick" "up" "(" itemCount = Addition ")"  itemPicked = ItemDef
		//holdingItem = (ScanAndAddToBasket | Drop)
		public Group getGroup() { return cGroup; }
		
		//"pick"
		public Keyword getPickKeyword_0() { return cPickKeyword_0; }
		
		//"up"
		public Keyword getUpKeyword_1() { return cUpKeyword_1; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2() { return cLeftParenthesisKeyword_2; }
		
		//itemCount = Addition
		public Assignment getItemCountAssignment_3() { return cItemCountAssignment_3; }
		
		//Addition
		public RuleCall getItemCountAdditionParserRuleCall_3_0() { return cItemCountAdditionParserRuleCall_3_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_4() { return cRightParenthesisKeyword_4; }
		
		//itemPicked = ItemDef
		public Assignment getItemPickedAssignment_5() { return cItemPickedAssignment_5; }
		
		//ItemDef
		public RuleCall getItemPickedItemDefParserRuleCall_5_0() { return cItemPickedItemDefParserRuleCall_5_0; }
		
		//holdingItem = (ScanAndAddToBasket | Drop)
		public Assignment getHoldingItemAssignment_6() { return cHoldingItemAssignment_6; }
		
		//(ScanAndAddToBasket | Drop)
		public Alternatives getHoldingItemAlternatives_6_0() { return cHoldingItemAlternatives_6_0; }
		
		//ScanAndAddToBasket
		public RuleCall getHoldingItemScanAndAddToBasketParserRuleCall_6_0_0() { return cHoldingItemScanAndAddToBasketParserRuleCall_6_0_0; }
		
		//Drop
		public RuleCall getHoldingItemDropParserRuleCall_6_0_1() { return cHoldingItemDropParserRuleCall_6_0_1; }
	}
	public class ItemDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.ItemDef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ItemDef:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class ScanAndAddToBasketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.ScanAndAddToBasket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAndKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cAddKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Keyword cToKeyword_3 = (Keyword)cGroup.eContents().get(3);
		private final Keyword cBasketKeyword_4 = (Keyword)cGroup.eContents().get(4);
		private final Assignment cItemInBasketAssignment_5 = (Assignment)cGroup.eContents().get(5);
		private final CrossReference cItemInBasketItemDefCrossReference_5_0 = (CrossReference)cItemInBasketAssignment_5.eContents().get(0);
		private final RuleCall cItemInBasketItemDefIDTerminalRuleCall_5_0_1 = (RuleCall)cItemInBasketItemDefCrossReference_5_0.eContents().get(1);
		
		//ScanAndAddToBasket:
		//    "scan" "and" "add" "to" "basket" itemInBasket=[ItemDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"scan" "and" "add" "to" "basket" itemInBasket=[ItemDef]
		public Group getGroup() { return cGroup; }
		
		//"scan"
		public Keyword getScanKeyword_0() { return cScanKeyword_0; }
		
		//"and"
		public Keyword getAndKeyword_1() { return cAndKeyword_1; }
		
		//"add"
		public Keyword getAddKeyword_2() { return cAddKeyword_2; }
		
		//"to"
		public Keyword getToKeyword_3() { return cToKeyword_3; }
		
		//"basket"
		public Keyword getBasketKeyword_4() { return cBasketKeyword_4; }
		
		//itemInBasket=[ItemDef]
		public Assignment getItemInBasketAssignment_5() { return cItemInBasketAssignment_5; }
		
		//[ItemDef]
		public CrossReference getItemInBasketItemDefCrossReference_5_0() { return cItemInBasketItemDefCrossReference_5_0; }
		
		//ID
		public RuleCall getItemInBasketItemDefIDTerminalRuleCall_5_0_1() { return cItemInBasketItemDefIDTerminalRuleCall_5_0_1; }
	}
	public class DropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Drop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDropKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemDroppedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cItemDroppedItemDefCrossReference_1_0 = (CrossReference)cItemDroppedAssignment_1.eContents().get(0);
		private final RuleCall cItemDroppedItemDefIDTerminalRuleCall_1_0_1 = (RuleCall)cItemDroppedItemDefCrossReference_1_0.eContents().get(1);
		
		//Drop:
		//    "drop" itemDropped=[ItemDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"drop" itemDropped=[ItemDef]
		public Group getGroup() { return cGroup; }
		
		//"drop"
		public Keyword getDropKeyword_0() { return cDropKeyword_0; }
		
		//itemDropped=[ItemDef]
		public Assignment getItemDroppedAssignment_1() { return cItemDroppedAssignment_1; }
		
		//[ItemDef]
		public CrossReference getItemDroppedItemDefCrossReference_1_0() { return cItemDroppedItemDefCrossReference_1_0; }
		
		//ID
		public RuleCall getItemDroppedItemDefIDTerminalRuleCall_1_0_1() { return cItemDroppedItemDefIDTerminalRuleCall_1_0_1; }
	}
	public class WalkStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.WalkStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepeatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cHoldBasketStatementParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		private final RuleCall cVariableDeclarationParserRuleCall_4 = (RuleCall)cAlternatives.eContents().get(4);
		
		//WalkStatement:
		//    MoveStatement |
		//    TurnStatement |
		//    Repeat |
		////    VariableDeclaration
		////;
		//    HoldBasketStatement |
		//    VariableDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//    MoveStatement |
		//    TurnStatement |
		//    Repeat |
		////    VariableDeclaration
		////;
		//    HoldBasketStatement |
		//    VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveStatement
		public RuleCall getMoveStatementParserRuleCall_0() { return cMoveStatementParserRuleCall_0; }
		
		//TurnStatement
		public RuleCall getTurnStatementParserRuleCall_1() { return cTurnStatementParserRuleCall_1; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_2() { return cRepeatParserRuleCall_2; }
		
		////    VariableDeclaration
		////;
		//    HoldBasketStatement
		public RuleCall getHoldBasketStatementParserRuleCall_3() { return cHoldBasketStatementParserRuleCall_3; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_4() { return cVariableDeclarationParserRuleCall_4; }
	}
	public class HoldBasketStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.HoldBasketStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cBasketKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cStateAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cStateGripStateEnumRuleCall_1_0 = (RuleCall)cStateAssignment_1.eContents().get(0);
		
		//HoldBasketStatement:
		//    'basket' state=GripState
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//'basket' state=GripState
		public Group getGroup() { return cGroup; }
		
		//'basket'
		public Keyword getBasketKeyword_0() { return cBasketKeyword_0; }
		
		//state=GripState
		public Assignment getStateAssignment_1() { return cStateAssignment_1; }
		
		//GripState
		public RuleCall getStateGripStateEnumRuleCall_1_0() { return cStateGripStateEnumRuleCall_1_0; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountAdditionParserRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cStatementWalkStatementParserRuleCall_3_0 = (RuleCall)cStatementAssignment_3.eContents().get(0);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Repeat:
		//    "repeat" count = Addition "times:"
		//      statement += WalkStatement+////////
		//    "end"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"repeat" count = Addition "times:"
		//  statement += WalkStatement+////////
		//"end"
		public Group getGroup() { return cGroup; }
		
		//"repeat"
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//count = Addition
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//Addition
		public RuleCall getCountAdditionParserRuleCall_1_0() { return cCountAdditionParserRuleCall_1_0; }
		
		//"times:"
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }
		
		//statement += WalkStatement+
		public Assignment getStatementAssignment_3() { return cStatementAssignment_3; }
		
		//WalkStatement
		public RuleCall getStatementWalkStatementParserRuleCall_3_0() { return cStatementWalkStatementParserRuleCall_3_0; }
		
		//////////
		//    "end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class MoveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.MoveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandMoveCommandEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsAdditionParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MoveStatement:
		//    command = MoveCommand "(" steps = Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command = MoveCommand "(" steps = Addition ")"
		public Group getGroup() { return cGroup; }
		
		//command = MoveCommand
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//MoveCommand
		public RuleCall getCommandMoveCommandEnumRuleCall_0_0() { return cCommandMoveCommandEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//steps = Addition
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//Addition
		public RuleCall getStepsAdditionParserRuleCall_2_0() { return cStepsAdditionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TurnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.TurnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandTurnCommandEnumRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		
		//TurnStatement:
		//    "turn" command = TurnCommand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"turn" command = TurnCommand
		public Group getGroup() { return cGroup; }
		
		//"turn"
		public Keyword getTurnKeyword_0() { return cTurnKeyword_0; }
		
		//command = TurnCommand
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//TurnCommand
		public RuleCall getCommandTurnCommandEnumRuleCall_1_0() { return cCommandTurnCommandEnumRuleCall_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns IntExpression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns IntExpression:
		//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns IntExpression:
		//    IntLiteral |
		//    IntVarExpression |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral |
		//IntVarExpression |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//IntVarExpression
		public RuleCall getIntVarExpressionParserRuleCall_1() { return cIntVarExpressionParserRuleCall_1; }
		
		//"(" Addition ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTEGERParserRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//    val = INTEGER
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = INTEGER
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INTEGER
		public RuleCall getValINTEGERParserRuleCall_0() { return cValINTEGERParserRuleCall_0; }
	}
	public class INTEGERElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.INTEGER");
		private final RuleCall cINTTerminalRuleCall = (RuleCall)rule.eContents().get(1);
		
		//INTEGER returns ecore::EInt hidden():
		//    INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//INT
		public RuleCall getINTTerminalRuleCall() { return cINTTerminalRuleCall; }
	}
	public class IntVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.IntVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		////REAL returns ecore::EFloat hidden():
		////    INT? "." INT
		////;
		//IntVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class CheckoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Checkout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cSelfCheckoutKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScanAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScanScanExpressionParserRuleCall_3_0 = (RuleCall)cScanAssignment_3.eContents().get(0);
		private final Assignment cPayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPayPayEnumRuleCall_4_0 = (RuleCall)cPayAssignment_4.eContents().get(0);
		
		//Checkout:
		//    "go" "to" "self-checkout"
		//    scan = ScanExpression
		//    pay = Pay
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"go" "to" "self-checkout"
		//scan = ScanExpression
		//pay = Pay
		public Group getGroup() { return cGroup; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"self-checkout"
		public Keyword getSelfCheckoutKeyword_2() { return cSelfCheckoutKeyword_2; }
		
		//scan = ScanExpression
		public Assignment getScanAssignment_3() { return cScanAssignment_3; }
		
		//ScanExpression
		public RuleCall getScanScanExpressionParserRuleCall_3_0() { return cScanScanExpressionParserRuleCall_3_0; }
		
		//pay = Pay
		public Assignment getPayAssignment_4() { return cPayAssignment_4; }
		
		//Pay
		public RuleCall getPayPayEnumRuleCall_4_0() { return cPayPayEnumRuleCall_4_0; }
	}
	public class ScanExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.ScanExpression");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cScanParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cComplexScanStartAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Keyword cThenKeyword_1_1 = (Keyword)cGroup_1.eContents().get(1);
		private final Assignment cNextAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cNextCarryItemsParserRuleCall_1_2_0 = (RuleCall)cNextAssignment_1_2.eContents().get(0);
		
		//ScanExpression:
		//    Scan ({ComplexScan.start = current} 'then' next += CarryItems)?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Scan ({ComplexScan.start = current} 'then' next += CarryItems)?
		public Group getGroup() { return cGroup; }
		
		//Scan
		public RuleCall getScanParserRuleCall_0() { return cScanParserRuleCall_0; }
		
		//({ComplexScan.start = current} 'then' next += CarryItems)?
		public Group getGroup_1() { return cGroup_1; }
		
		//{ComplexScan.start = current}
		public Action getComplexScanStartAction_1_0() { return cComplexScanStartAction_1_0; }
		
		//'then'
		public Keyword getThenKeyword_1_1() { return cThenKeyword_1_1; }
		
		//next += CarryItems
		public Assignment getNextAssignment_1_2() { return cNextAssignment_1_2; }
		
		//CarryItems
		public RuleCall getNextCarryItemsParserRuleCall_1_2_0() { return cNextCarryItemsParserRuleCall_1_2_0; }
	}
	public class ScanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Scan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cBarcodeKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cWithKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScanMachineAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScanMachineSelfScannerEnumRuleCall_3_0 = (RuleCall)cScanMachineAssignment_3.eContents().get(0);
		
		//Scan:
		//    "scan" "barcode" "with" scanMachine = SelfScanner
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"scan" "barcode" "with" scanMachine = SelfScanner
		public Group getGroup() { return cGroup; }
		
		//"scan"
		public Keyword getScanKeyword_0() { return cScanKeyword_0; }
		
		//"barcode"
		public Keyword getBarcodeKeyword_1() { return cBarcodeKeyword_1; }
		
		//"with"
		public Keyword getWithKeyword_2() { return cWithKeyword_2; }
		
		//scanMachine = SelfScanner
		public Assignment getScanMachineAssignment_3() { return cScanMachineAssignment_3; }
		
		//SelfScanner
		public RuleCall getScanMachineSelfScannerEnumRuleCall_3_0() { return cScanMachineSelfScannerEnumRuleCall_3_0; }
	}
	public class CarryItemsElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.CarryItems");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCarryAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCarryCarryEnumRuleCall_0_0 = (RuleCall)cCarryAssignment_0.eContents().get(0);
		private final Keyword cAllKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cItemsKeyword_2 = (Keyword)cGroup.eContents().get(2);
		
		//CarryItems:
		//    carry = Carry  "all" "items"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//carry = Carry  "all" "items"
		public Group getGroup() { return cGroup; }
		
		//carry = Carry
		public Assignment getCarryAssignment_0() { return cCarryAssignment_0; }
		
		//Carry
		public RuleCall getCarryCarryEnumRuleCall_0_0() { return cCarryCarryEnumRuleCall_0_0; }
		
		//"all"
		public Keyword getAllKeyword_1() { return cAllKeyword_1; }
		
		//"items"
		public Keyword getItemsKeyword_2() { return cItemsKeyword_2; }
	}
	
	public class LoadShoppingSiteElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.LoadShoppingSite");
		private final EnumLiteralDeclaration cLoad_shop_siteEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cLoad_shop_siteLoad_shop_siteKeyword_0 = (Keyword)cLoad_shop_siteEnumLiteralDeclaration.eContents().get(0);
		
		//enum LoadShoppingSite:
		//    load_shop_site
		//;
		public EnumRule getRule() { return rule; }
		
		//load_shop_site
		public EnumLiteralDeclaration getLoad_shop_siteEnumLiteralDeclaration() { return cLoad_shop_siteEnumLiteralDeclaration; }
		
		public Keyword getLoad_shop_siteLoad_shop_siteKeyword_0() { return cLoad_shop_siteLoad_shop_siteKeyword_0; }
	}
	public class DeliveryOptionsElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.DeliveryOptions");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cPremium_deliveryEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cPremium_deliveryPremium_deliveryKeyword_0_0 = (Keyword)cPremium_deliveryEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cStandard_deliveryEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cStandard_deliveryStandard_deliveryKeyword_1_0 = (Keyword)cStandard_deliveryEnumLiteralDeclaration_1.eContents().get(0);
		private final EnumLiteralDeclaration cNext_day_deliveryEnumLiteralDeclaration_2 = (EnumLiteralDeclaration)cAlternatives.eContents().get(2);
		private final Keyword cNext_day_deliveryNext_day_deliveryKeyword_2_0 = (Keyword)cNext_day_deliveryEnumLiteralDeclaration_2.eContents().get(0);
		
		//enum DeliveryOptions:
		//    premium_delivery | standard_delivery | next_day_delivery
		//;
		public EnumRule getRule() { return rule; }
		
		//premium_delivery | standard_delivery | next_day_delivery
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//premium_delivery
		public EnumLiteralDeclaration getPremium_deliveryEnumLiteralDeclaration_0() { return cPremium_deliveryEnumLiteralDeclaration_0; }
		
		public Keyword getPremium_deliveryPremium_deliveryKeyword_0_0() { return cPremium_deliveryPremium_deliveryKeyword_0_0; }
		
		//standard_delivery
		public EnumLiteralDeclaration getStandard_deliveryEnumLiteralDeclaration_1() { return cStandard_deliveryEnumLiteralDeclaration_1; }
		
		public Keyword getStandard_deliveryStandard_deliveryKeyword_1_0() { return cStandard_deliveryStandard_deliveryKeyword_1_0; }
		
		//next_day_delivery
		public EnumLiteralDeclaration getNext_day_deliveryEnumLiteralDeclaration_2() { return cNext_day_deliveryEnumLiteralDeclaration_2; }
		
		public Keyword getNext_day_deliveryNext_day_deliveryKeyword_2_0() { return cNext_day_deliveryNext_day_deliveryKeyword_2_0; }
	}
	public class ConfirmEnumElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.ConfirmEnum");
		private final EnumLiteralDeclaration cConfirmEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cConfirmConfirmKeyword_0 = (Keyword)cConfirmEnumLiteralDeclaration.eContents().get(0);
		
		//enum ConfirmEnum:
		//    confirm
		//;
		public EnumRule getRule() { return rule; }
		
		//confirm
		public EnumLiteralDeclaration getConfirmEnumLiteralDeclaration() { return cConfirmEnumLiteralDeclaration; }
		
		public Keyword getConfirmConfirmKeyword_0() { return cConfirmConfirmKeyword_0; }
	}
	public class SelfScannerElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.SelfScanner");
		private final EnumLiteralDeclaration cSelfscannerEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cSelfscannerSelfscannerKeyword_0 = (Keyword)cSelfscannerEnumLiteralDeclaration.eContents().get(0);
		
		//enum SelfScanner:
		//    selfscanner
		//;
		public EnumRule getRule() { return rule; }
		
		//selfscanner
		public EnumLiteralDeclaration getSelfscannerEnumLiteralDeclaration() { return cSelfscannerEnumLiteralDeclaration; }
		
		public Keyword getSelfscannerSelfscannerKeyword_0() { return cSelfscannerSelfscannerKeyword_0; }
	}
	public class GripStateElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.GripState");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cUpEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cUpUpKeyword_0_0 = (Keyword)cUpEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cDownEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cDownDownKeyword_1_0 = (Keyword)cDownEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum GripState:
		//    up | down
		//;
		public EnumRule getRule() { return rule; }
		
		//up | down
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//up
		public EnumLiteralDeclaration getUpEnumLiteralDeclaration_0() { return cUpEnumLiteralDeclaration_0; }
		
		public Keyword getUpUpKeyword_0_0() { return cUpUpKeyword_0_0; }
		
		//down
		public EnumLiteralDeclaration getDownEnumLiteralDeclaration_1() { return cDownEnumLiteralDeclaration_1; }
		
		public Keyword getDownDownKeyword_1_0() { return cDownDownKeyword_1_0; }
	}
	public class MoveCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.MoveCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardForwardKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackwardBackwardKeyword_1_0 = (Keyword)cBackwardEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MoveCommand:
		//    forward | backward
		//;
		public EnumRule getRule() { return rule; }
		
		//forward | backward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forward
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		public Keyword getForwardForwardKeyword_0_0() { return cForwardForwardKeyword_0_0; }
		
		//backward
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_1() { return cBackwardEnumLiteralDeclaration_1; }
		
		public Keyword getBackwardBackwardKeyword_1_0() { return cBackwardBackwardKeyword_1_0; }
	}
	public class TurnCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.TurnCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TurnCommand:
		//    left | right
		//;
		public EnumRule getRule() { return rule; }
		
		//left | right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
	}
	public class CarryElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Carry");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cBagEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cBagBagKeyword_0_0 = (Keyword)cBagEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cHoldEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cHoldHoldKeyword_1_0 = (Keyword)cHoldEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum Carry:
		//    bag | hold
		//;
		public EnumRule getRule() { return rule; }
		
		//bag | hold
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//bag
		public EnumLiteralDeclaration getBagEnumLiteralDeclaration_0() { return cBagEnumLiteralDeclaration_0; }
		
		public Keyword getBagBagKeyword_0_0() { return cBagBagKeyword_0_0; }
		
		//hold
		public EnumLiteralDeclaration getHoldEnumLiteralDeclaration_1() { return cHoldEnumLiteralDeclaration_1; }
		
		public Keyword getHoldHoldKeyword_1_0() { return cHoldHoldKeyword_1_0; }
	}
	public class PayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Pay");
		private final EnumLiteralDeclaration cPayEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPayPayKeyword_0 = (Keyword)cPayEnumLiteralDeclaration.eContents().get(0);
		
		//enum Pay:
		//    pay
		//;
		public EnumRule getRule() { return rule; }
		
		//pay
		public EnumLiteralDeclaration getPayEnumLiteralDeclaration() { return cPayEnumLiteralDeclaration; }
		
		public Keyword getPayPayKeyword_0() { return cPayPayKeyword_0; }
	}
	
	private final Self_checkoutElements pSelf_checkout;
	private final SelfCheckoutExperienceElements pSelfCheckoutExperience;
	private final SelfCheckoutOnlineElements pSelfCheckoutOnline;
	private final LoadShoppingSiteElements eLoadShoppingSite;
	private final SearchElements pSearch;
	private final AddToOnlineBasketElements pAddToOnlineBasket;
	private final RemoveFromOnlineBasketElements pRemoveFromOnlineBasket;
	private final OnlineCheckoutElements pOnlineCheckout;
	private final DeliveryOptionsElements eDeliveryOptions;
	private final ConfirmElements pConfirm;
	private final ConfirmEnumElements eConfirmEnum;
	private final SelfCheckoutInstoreElements pSelfCheckoutInstore;
	private final HoldSelfScannerElements pHoldSelfScanner;
	private final SelfScannerElements eSelfScanner;
	private final PickStatementElements pPickStatement;
	private final ItemDefElements pItemDef;
	private final ScanAndAddToBasketElements pScanAndAddToBasket;
	private final DropElements pDrop;
	private final WalkStatementElements pWalkStatement;
	private final HoldBasketStatementElements pHoldBasketStatement;
	private final GripStateElements eGripState;
	private final VariableDeclarationElements pVariableDeclaration;
	private final RepeatElements pRepeat;
	private final MoveStatementElements pMoveStatement;
	private final MoveCommandElements eMoveCommand;
	private final TurnStatementElements pTurnStatement;
	private final TurnCommandElements eTurnCommand;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntLiteralElements pIntLiteral;
	private final INTEGERElements pINTEGER;
	private final IntVarExpressionElements pIntVarExpression;
	private final CheckoutElements pCheckout;
	private final ScanExpressionElements pScanExpression;
	private final ScanElements pScan;
	private final CarryItemsElements pCarryItems;
	private final CarryElements eCarry;
	private final PayElements ePay;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SelfCheckoutExperienceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSelf_checkout = new Self_checkoutElements();
		this.pSelfCheckoutExperience = new SelfCheckoutExperienceElements();
		this.pSelfCheckoutOnline = new SelfCheckoutOnlineElements();
		this.eLoadShoppingSite = new LoadShoppingSiteElements();
		this.pSearch = new SearchElements();
		this.pAddToOnlineBasket = new AddToOnlineBasketElements();
		this.pRemoveFromOnlineBasket = new RemoveFromOnlineBasketElements();
		this.pOnlineCheckout = new OnlineCheckoutElements();
		this.eDeliveryOptions = new DeliveryOptionsElements();
		this.pConfirm = new ConfirmElements();
		this.eConfirmEnum = new ConfirmEnumElements();
		this.pSelfCheckoutInstore = new SelfCheckoutInstoreElements();
		this.pHoldSelfScanner = new HoldSelfScannerElements();
		this.eSelfScanner = new SelfScannerElements();
		this.pPickStatement = new PickStatementElements();
		this.pItemDef = new ItemDefElements();
		this.pScanAndAddToBasket = new ScanAndAddToBasketElements();
		this.pDrop = new DropElements();
		this.pWalkStatement = new WalkStatementElements();
		this.pHoldBasketStatement = new HoldBasketStatementElements();
		this.eGripState = new GripStateElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pRepeat = new RepeatElements();
		this.pMoveStatement = new MoveStatementElements();
		this.eMoveCommand = new MoveCommandElements();
		this.pTurnStatement = new TurnStatementElements();
		this.eTurnCommand = new TurnCommandElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pINTEGER = new INTEGERElements();
		this.pIntVarExpression = new IntVarExpressionElements();
		this.pCheckout = new CheckoutElements();
		this.pScanExpression = new ScanExpressionElements();
		this.pScan = new ScanElements();
		this.pCarryItems = new CarryItemsElements();
		this.eCarry = new CarryElements();
		this.ePay = new PayElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("self_checkout_experience.SelfCheckoutExperience".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Self_checkout:
	//    selfCheckoutExperience+=SelfCheckoutExperience*
	//;
	public Self_checkoutElements getSelf_checkoutAccess() {
		return pSelf_checkout;
	}
	
	public ParserRule getSelf_checkoutRule() {
		return getSelf_checkoutAccess().getRule();
	}
	
	//SelfCheckoutExperience:
	//    SelfCheckoutOnline | SelfCheckoutInstore
	//;
	public SelfCheckoutExperienceElements getSelfCheckoutExperienceAccess() {
		return pSelfCheckoutExperience;
	}
	
	public ParserRule getSelfCheckoutExperienceRule() {
		return getSelfCheckoutExperienceAccess().getRule();
	}
	
	///////////////////////////////////////////////////////////////////ONLINE SELF-CHECKOUT/////////////////////////////////////////////////////////////////////
	//SelfCheckoutOnline:
	//    loadShoppingSite=LoadShoppingSite
	//    search+=Search*
	//    onlineCheckout=OnlineCheckout?
	//;
	public SelfCheckoutOnlineElements getSelfCheckoutOnlineAccess() {
		return pSelfCheckoutOnline;
	}
	
	public ParserRule getSelfCheckoutOnlineRule() {
		return getSelfCheckoutOnlineAccess().getRule();
	}
	
	//enum LoadShoppingSite:
	//    load_shop_site
	//;
	public LoadShoppingSiteElements getLoadShoppingSiteAccess() {
		return eLoadShoppingSite;
	}
	
	public EnumRule getLoadShoppingSiteRule() {
		return getLoadShoppingSiteAccess().getRule();
	}
	
	//Search:
	//    "search" "for" itemSearch=ItemDef
	//    addToOnlineBasket=AddToOnlineBasket?
	//;
	public SearchElements getSearchAccess() {
		return pSearch;
	}
	
	public ParserRule getSearchRule() {
		return getSearchAccess().getRule();
	}
	
	//AddToOnlineBasket:
	////    "add" "to" "basket" itemCount = Addition item=[ItemDef]
	//    "add" "to" "basket" "(" itemCount = Addition ")" item=[ItemDef]
	//    removeFromOnlineBasket=RemoveFromOnlineBasket?
	//;
	public AddToOnlineBasketElements getAddToOnlineBasketAccess() {
		return pAddToOnlineBasket;
	}
	
	public ParserRule getAddToOnlineBasketRule() {
		return getAddToOnlineBasketAccess().getRule();
	}
	
	//RemoveFromOnlineBasket:
	//    "remove" "from" "basket" removeItem=[ItemDef]
	//;
	public RemoveFromOnlineBasketElements getRemoveFromOnlineBasketAccess() {
		return pRemoveFromOnlineBasket;
	}
	
	public ParserRule getRemoveFromOnlineBasketRule() {
		return getRemoveFromOnlineBasketAccess().getRule();
	}
	
	//OnlineCheckout:
	//    "checkout"
	//    deliveryOptions=DeliveryOptions
	//    confirm=Confirm
	//;
	public OnlineCheckoutElements getOnlineCheckoutAccess() {
		return pOnlineCheckout;
	}
	
	public ParserRule getOnlineCheckoutRule() {
		return getOnlineCheckoutAccess().getRule();
	}
	
	//enum DeliveryOptions:
	//    premium_delivery | standard_delivery | next_day_delivery
	//;
	public DeliveryOptionsElements getDeliveryOptionsAccess() {
		return eDeliveryOptions;
	}
	
	public EnumRule getDeliveryOptionsRule() {
		return getDeliveryOptionsAccess().getRule();
	}
	
	//Confirm:
	//    confirmEnum=ConfirmEnum
	//    pay=Pay
	//;
	public ConfirmElements getConfirmAccess() {
		return pConfirm;
	}
	
	public ParserRule getConfirmRule() {
		return getConfirmAccess().getRule();
	}
	
	//enum ConfirmEnum:
	//    confirm
	//;
	public ConfirmEnumElements getConfirmEnumAccess() {
		return eConfirmEnum;
	}
	
	public EnumRule getConfirmEnumRule() {
		return getConfirmEnumAccess().getRule();
	}
	
	//////////////////////////////////////////////////////////////////IN-STORE SELF-CHECKOUT//////////////////////////////////////////////////////////////////////
	//SelfCheckoutInstore:
	//    pickScanMachine = HoldSelfScanner
	//    statement+=(PickStatement|WalkStatement)*
	//    checkout = Checkout?
	//;
	public SelfCheckoutInstoreElements getSelfCheckoutInstoreAccess() {
		return pSelfCheckoutInstore;
	}
	
	public ParserRule getSelfCheckoutInstoreRule() {
		return getSelfCheckoutInstoreAccess().getRule();
	}
	
	//HoldSelfScanner:
	//    "hold" scanMachine = SelfScanner
	//;
	public HoldSelfScannerElements getHoldSelfScannerAccess() {
		return pHoldSelfScanner;
	}
	
	public ParserRule getHoldSelfScannerRule() {
		return getHoldSelfScannerAccess().getRule();
	}
	
	//enum SelfScanner:
	//    selfscanner
	//;
	public SelfScannerElements getSelfScannerAccess() {
		return eSelfScanner;
	}
	
	public EnumRule getSelfScannerRule() {
		return getSelfScannerAccess().getRule();
	}
	
	//PickStatement:
	//    "pick" "up" "(" itemCount = Addition ")"  itemPicked = ItemDef
	//    holdingItem = (ScanAndAddToBasket | Drop)
	//;
	public PickStatementElements getPickStatementAccess() {
		return pPickStatement;
	}
	
	public ParserRule getPickStatementRule() {
		return getPickStatementAccess().getRule();
	}
	
	//ItemDef:
	//    name = ID
	//;
	public ItemDefElements getItemDefAccess() {
		return pItemDef;
	}
	
	public ParserRule getItemDefRule() {
		return getItemDefAccess().getRule();
	}
	
	//ScanAndAddToBasket:
	//    "scan" "and" "add" "to" "basket" itemInBasket=[ItemDef]
	//;
	public ScanAndAddToBasketElements getScanAndAddToBasketAccess() {
		return pScanAndAddToBasket;
	}
	
	public ParserRule getScanAndAddToBasketRule() {
		return getScanAndAddToBasketAccess().getRule();
	}
	
	//Drop:
	//    "drop" itemDropped=[ItemDef]
	//;
	public DropElements getDropAccess() {
		return pDrop;
	}
	
	public ParserRule getDropRule() {
		return getDropAccess().getRule();
	}
	
	//WalkStatement:
	//    MoveStatement |
	//    TurnStatement |
	//    Repeat |
	////    VariableDeclaration
	////;
	//    HoldBasketStatement |
	//    VariableDeclaration
	//;
	public WalkStatementElements getWalkStatementAccess() {
		return pWalkStatement;
	}
	
	public ParserRule getWalkStatementRule() {
		return getWalkStatementAccess().getRule();
	}
	
	//HoldBasketStatement:
	//    'basket' state=GripState
	//;
	public HoldBasketStatementElements getHoldBasketStatementAccess() {
		return pHoldBasketStatement;
	}
	
	public ParserRule getHoldBasketStatementRule() {
		return getHoldBasketStatementAccess().getRule();
	}
	
	//enum GripState:
	//    up | down
	//;
	public GripStateElements getGripStateAccess() {
		return eGripState;
	}
	
	public EnumRule getGripStateRule() {
		return getGripStateAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" value=INT
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Repeat:
	//    "repeat" count = Addition "times:"
	//      statement += WalkStatement+////////
	//    "end"
	//;
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//MoveStatement:
	//    command = MoveCommand "(" steps = Addition ")"
	//;
	public MoveStatementElements getMoveStatementAccess() {
		return pMoveStatement;
	}
	
	public ParserRule getMoveStatementRule() {
		return getMoveStatementAccess().getRule();
	}
	
	//enum MoveCommand:
	//    forward | backward
	//;
	public MoveCommandElements getMoveCommandAccess() {
		return eMoveCommand;
	}
	
	public EnumRule getMoveCommandRule() {
		return getMoveCommandAccess().getRule();
	}
	
	//TurnStatement:
	//    "turn" command = TurnCommand
	//;
	public TurnStatementElements getTurnStatementAccess() {
		return pTurnStatement;
	}
	
	public ParserRule getTurnStatementRule() {
		return getTurnStatementAccess().getRule();
	}
	
	//enum TurnCommand:
	//    left | right
	//;
	public TurnCommandElements getTurnCommandAccess() {
		return eTurnCommand;
	}
	
	public EnumRule getTurnCommandRule() {
		return getTurnCommandAccess().getRule();
	}
	
	//Addition returns IntExpression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns IntExpression:
	//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns IntExpression:
	//    IntLiteral |
	//    IntVarExpression |
	//    "(" Addition ")"
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntLiteral:
	//    val = INTEGER
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//INTEGER returns ecore::EInt hidden():
	//    INT
	//;
	public INTEGERElements getINTEGERAccess() {
		return pINTEGER;
	}
	
	public ParserRule getINTEGERRule() {
		return getINTEGERAccess().getRule();
	}
	
	////REAL returns ecore::EFloat hidden():
	////    INT? "." INT
	////;
	//IntVarExpression:
	//    var = [VariableDeclaration]
	//;
	public IntVarExpressionElements getIntVarExpressionAccess() {
		return pIntVarExpression;
	}
	
	public ParserRule getIntVarExpressionRule() {
		return getIntVarExpressionAccess().getRule();
	}
	
	//Checkout:
	//    "go" "to" "self-checkout"
	//    scan = ScanExpression
	//    pay = Pay
	//;
	public CheckoutElements getCheckoutAccess() {
		return pCheckout;
	}
	
	public ParserRule getCheckoutRule() {
		return getCheckoutAccess().getRule();
	}
	
	//ScanExpression:
	//    Scan ({ComplexScan.start = current} 'then' next += CarryItems)?
	//;
	public ScanExpressionElements getScanExpressionAccess() {
		return pScanExpression;
	}
	
	public ParserRule getScanExpressionRule() {
		return getScanExpressionAccess().getRule();
	}
	
	//Scan:
	//    "scan" "barcode" "with" scanMachine = SelfScanner
	//;
	public ScanElements getScanAccess() {
		return pScan;
	}
	
	public ParserRule getScanRule() {
		return getScanAccess().getRule();
	}
	
	//CarryItems:
	//    carry = Carry  "all" "items"
	//;
	public CarryItemsElements getCarryItemsAccess() {
		return pCarryItems;
	}
	
	public ParserRule getCarryItemsRule() {
		return getCarryItemsAccess().getRule();
	}
	
	//enum Carry:
	//    bag | hold
	//;
	public CarryElements getCarryAccess() {
		return eCarry;
	}
	
	public EnumRule getCarryRule() {
		return getCarryAccess().getRule();
	}
	
	//enum Pay:
	//    pay
	//;
	public PayElements getPayAccess() {
		return ePay;
	}
	
	public EnumRule getPayRule() {
		return getPayAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
