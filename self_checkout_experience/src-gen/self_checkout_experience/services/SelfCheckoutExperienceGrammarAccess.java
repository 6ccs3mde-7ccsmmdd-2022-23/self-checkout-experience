/*
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.services;

import com.google.inject.Inject;
import com.google.inject.Singleton;
import java.util.List;
import org.eclipse.xtext.Action;
import org.eclipse.xtext.Alternatives;
import org.eclipse.xtext.Assignment;
import org.eclipse.xtext.CrossReference;
import org.eclipse.xtext.EnumLiteralDeclaration;
import org.eclipse.xtext.EnumRule;
import org.eclipse.xtext.Grammar;
import org.eclipse.xtext.GrammarUtil;
import org.eclipse.xtext.Group;
import org.eclipse.xtext.Keyword;
import org.eclipse.xtext.ParserRule;
import org.eclipse.xtext.RuleCall;
import org.eclipse.xtext.TerminalRule;
import org.eclipse.xtext.common.services.TerminalsGrammarAccess;
import org.eclipse.xtext.service.AbstractElementFinder;
import org.eclipse.xtext.service.GrammarProvider;

@Singleton
public class SelfCheckoutExperienceGrammarAccess extends AbstractElementFinder.AbstractGrammarElementFinder {
	
	public class Self_checkoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Self_checkout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Alternatives cAlternatives_0 = (Alternatives)cGroup.eContents().get(0);
		private final Assignment cPickstatementsAssignment_0_0 = (Assignment)cAlternatives_0.eContents().get(0);
		private final RuleCall cPickstatementsPickStatementParserRuleCall_0_0_0 = (RuleCall)cPickstatementsAssignment_0_0.eContents().get(0);
		private final Assignment cWalkstatementsAssignment_0_1 = (Assignment)cAlternatives_0.eContents().get(1);
		private final RuleCall cWalkstatementsWalkStatementParserRuleCall_0_1_0 = (RuleCall)cWalkstatementsAssignment_0_1.eContents().get(0);
		private final Assignment cCheckoutAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCheckoutCheckoutParserRuleCall_1_0 = (RuleCall)cCheckoutAssignment_1.eContents().get(0);
		
		//Self_checkout:
		//    (pickstatements+=PickStatement | walkstatements += WalkStatement)*
		//    checkout = Checkout?
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//(pickstatements+=PickStatement | walkstatements += WalkStatement)*
		//checkout = Checkout?
		public Group getGroup() { return cGroup; }
		
		//(pickstatements+=PickStatement | walkstatements += WalkStatement)*
		public Alternatives getAlternatives_0() { return cAlternatives_0; }
		
		//pickstatements+=PickStatement
		public Assignment getPickstatementsAssignment_0_0() { return cPickstatementsAssignment_0_0; }
		
		//PickStatement
		public RuleCall getPickstatementsPickStatementParserRuleCall_0_0_0() { return cPickstatementsPickStatementParserRuleCall_0_0_0; }
		
		//walkstatements += WalkStatement
		public Assignment getWalkstatementsAssignment_0_1() { return cWalkstatementsAssignment_0_1; }
		
		//WalkStatement
		public RuleCall getWalkstatementsWalkStatementParserRuleCall_0_1_0() { return cWalkstatementsWalkStatementParserRuleCall_0_1_0; }
		
		//checkout = Checkout?
		public Assignment getCheckoutAssignment_1() { return cCheckoutAssignment_1; }
		
		//Checkout
		public RuleCall getCheckoutCheckoutParserRuleCall_1_0() { return cCheckoutCheckoutParserRuleCall_1_0; }
	}
	public class PickStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.PickStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cPickKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cUpKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cItemCountAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cItemCountAdditionParserRuleCall_2_0 = (RuleCall)cItemCountAssignment_2.eContents().get(0);
		private final Assignment cItemPickedAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cItemPickedItemDefParserRuleCall_3_0 = (RuleCall)cItemPickedAssignment_3.eContents().get(0);
		private final Assignment cHoldingItemAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final Alternatives cHoldingItemAlternatives_4_0 = (Alternatives)cHoldingItemAssignment_4.eContents().get(0);
		private final RuleCall cHoldingItemAddToBasketParserRuleCall_4_0_0 = (RuleCall)cHoldingItemAlternatives_4_0.eContents().get(0);
		private final RuleCall cHoldingItemDropParserRuleCall_4_0_1 = (RuleCall)cHoldingItemAlternatives_4_0.eContents().get(1);
		
		//PickStatement:
		//    "pick" "up" itemCount = Addition itemPicked = ItemDef
		//    holdingItem = (AddToBasket | Drop)
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"pick" "up" itemCount = Addition itemPicked = ItemDef
		//holdingItem = (AddToBasket | Drop)
		public Group getGroup() { return cGroup; }
		
		//"pick"
		public Keyword getPickKeyword_0() { return cPickKeyword_0; }
		
		//"up"
		public Keyword getUpKeyword_1() { return cUpKeyword_1; }
		
		//itemCount = Addition
		public Assignment getItemCountAssignment_2() { return cItemCountAssignment_2; }
		
		//Addition
		public RuleCall getItemCountAdditionParserRuleCall_2_0() { return cItemCountAdditionParserRuleCall_2_0; }
		
		//itemPicked = ItemDef
		public Assignment getItemPickedAssignment_3() { return cItemPickedAssignment_3; }
		
		//ItemDef
		public RuleCall getItemPickedItemDefParserRuleCall_3_0() { return cItemPickedItemDefParserRuleCall_3_0; }
		
		//holdingItem = (AddToBasket | Drop)
		public Assignment getHoldingItemAssignment_4() { return cHoldingItemAssignment_4; }
		
		//(AddToBasket | Drop)
		public Alternatives getHoldingItemAlternatives_4_0() { return cHoldingItemAlternatives_4_0; }
		
		//AddToBasket
		public RuleCall getHoldingItemAddToBasketParserRuleCall_4_0_0() { return cHoldingItemAddToBasketParserRuleCall_4_0_0; }
		
		//Drop
		public RuleCall getHoldingItemDropParserRuleCall_4_0_1() { return cHoldingItemDropParserRuleCall_4_0_1; }
	}
	public class ItemDefElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.ItemDef");
		private final Assignment cNameAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_0 = (RuleCall)cNameAssignment.eContents().get(0);
		
		//ItemDef:
		//    name = ID
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//name = ID
		public Assignment getNameAssignment() { return cNameAssignment; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_0() { return cNameIDTerminalRuleCall_0; }
	}
	public class AddToBasketElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.AddToBasket");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBasketKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cItemInBasketAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cItemInBasketItemDefCrossReference_3_0 = (CrossReference)cItemInBasketAssignment_3.eContents().get(0);
		private final RuleCall cItemInBasketItemDefIDTerminalRuleCall_3_0_1 = (RuleCall)cItemInBasketItemDefCrossReference_3_0.eContents().get(1);
		
		//AddToBasket:
		//    "add" "to" "basket" itemInBasket=[ItemDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"add" "to" "basket" itemInBasket=[ItemDef]
		public Group getGroup() { return cGroup; }
		
		//"add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"basket"
		public Keyword getBasketKeyword_2() { return cBasketKeyword_2; }
		
		//itemInBasket=[ItemDef]
		public Assignment getItemInBasketAssignment_3() { return cItemInBasketAssignment_3; }
		
		//[ItemDef]
		public CrossReference getItemInBasketItemDefCrossReference_3_0() { return cItemInBasketItemDefCrossReference_3_0; }
		
		//ID
		public RuleCall getItemInBasketItemDefIDTerminalRuleCall_3_0_1() { return cItemInBasketItemDefIDTerminalRuleCall_3_0_1; }
	}
	public class DropElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Drop");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cDropKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cItemDroppedAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final CrossReference cItemDroppedItemDefCrossReference_1_0 = (CrossReference)cItemDroppedAssignment_1.eContents().get(0);
		private final RuleCall cItemDroppedItemDefIDTerminalRuleCall_1_0_1 = (RuleCall)cItemDroppedItemDefCrossReference_1_0.eContents().get(1);
		
		//Drop:
		//    "drop" itemDropped=[ItemDef]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"drop" itemDropped=[ItemDef]
		public Group getGroup() { return cGroup; }
		
		//"drop"
		public Keyword getDropKeyword_0() { return cDropKeyword_0; }
		
		//itemDropped=[ItemDef]
		public Assignment getItemDroppedAssignment_1() { return cItemDroppedAssignment_1; }
		
		//[ItemDef]
		public CrossReference getItemDroppedItemDefCrossReference_1_0() { return cItemDroppedItemDefCrossReference_1_0; }
		
		//ID
		public RuleCall getItemDroppedItemDefIDTerminalRuleCall_1_0_1() { return cItemDroppedItemDefIDTerminalRuleCall_1_0_1; }
	}
	public class WalkStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.WalkStatement");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cMoveStatementParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cTurnStatementParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final RuleCall cRepeatParserRuleCall_2 = (RuleCall)cAlternatives.eContents().get(2);
		private final RuleCall cVariableDeclarationParserRuleCall_3 = (RuleCall)cAlternatives.eContents().get(3);
		
		//WalkStatement:
		//    MoveStatement |
		//    TurnStatement |
		//    Repeat |
		//    VariableDeclaration
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//MoveStatement |
		//TurnStatement |
		//Repeat |
		//VariableDeclaration
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//MoveStatement
		public RuleCall getMoveStatementParserRuleCall_0() { return cMoveStatementParserRuleCall_0; }
		
		//TurnStatement
		public RuleCall getTurnStatementParserRuleCall_1() { return cTurnStatementParserRuleCall_1; }
		
		//Repeat
		public RuleCall getRepeatParserRuleCall_2() { return cRepeatParserRuleCall_2; }
		
		//VariableDeclaration
		public RuleCall getVariableDeclarationParserRuleCall_3() { return cVariableDeclarationParserRuleCall_3; }
	}
	public class VariableDeclarationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.VariableDeclaration");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cVarKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cNameAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cNameIDTerminalRuleCall_1_0 = (RuleCall)cNameAssignment_1.eContents().get(0);
		private final Keyword cEqualsSignKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cValueAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cValueINTTerminalRuleCall_3_0 = (RuleCall)cValueAssignment_3.eContents().get(0);
		
		//VariableDeclaration:
		//    "var" name=ID "=" value=INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"var" name=ID "=" value=INT
		public Group getGroup() { return cGroup; }
		
		//"var"
		public Keyword getVarKeyword_0() { return cVarKeyword_0; }
		
		//name=ID
		public Assignment getNameAssignment_1() { return cNameAssignment_1; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_1_0() { return cNameIDTerminalRuleCall_1_0; }
		
		//"="
		public Keyword getEqualsSignKeyword_2() { return cEqualsSignKeyword_2; }
		
		//value=INT
		public Assignment getValueAssignment_3() { return cValueAssignment_3; }
		
		//INT
		public RuleCall getValueINTTerminalRuleCall_3_0() { return cValueINTTerminalRuleCall_3_0; }
	}
	public class RepeatElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Repeat");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cRepeatKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCountAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCountAdditionParserRuleCall_1_0 = (RuleCall)cCountAssignment_1.eContents().get(0);
		private final Keyword cTimesKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cStatementsAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final Alternatives cStatementsAlternatives_3_0 = (Alternatives)cStatementsAssignment_3.eContents().get(0);
		private final RuleCall cStatementsWalkStatementParserRuleCall_3_0_0 = (RuleCall)cStatementsAlternatives_3_0.eContents().get(0);
		private final RuleCall cStatementsPickStatementParserRuleCall_3_0_1 = (RuleCall)cStatementsAlternatives_3_0.eContents().get(1);
		private final Keyword cEndKeyword_4 = (Keyword)cGroup.eContents().get(4);
		
		//Repeat:
		//    "repeat" count = Addition "times:"
		//      statements += (WalkStatement | PickStatement)+
		//    "end"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"repeat" count = Addition "times:"
		//  statements += (WalkStatement | PickStatement)+
		//"end"
		public Group getGroup() { return cGroup; }
		
		//"repeat"
		public Keyword getRepeatKeyword_0() { return cRepeatKeyword_0; }
		
		//count = Addition
		public Assignment getCountAssignment_1() { return cCountAssignment_1; }
		
		//Addition
		public RuleCall getCountAdditionParserRuleCall_1_0() { return cCountAdditionParserRuleCall_1_0; }
		
		//"times:"
		public Keyword getTimesKeyword_2() { return cTimesKeyword_2; }
		
		//statements += (WalkStatement | PickStatement)+
		public Assignment getStatementsAssignment_3() { return cStatementsAssignment_3; }
		
		//(WalkStatement | PickStatement)
		public Alternatives getStatementsAlternatives_3_0() { return cStatementsAlternatives_3_0; }
		
		//WalkStatement
		public RuleCall getStatementsWalkStatementParserRuleCall_3_0_0() { return cStatementsWalkStatementParserRuleCall_3_0_0; }
		
		//PickStatement
		public RuleCall getStatementsPickStatementParserRuleCall_3_0_1() { return cStatementsPickStatementParserRuleCall_3_0_1; }
		
		//"end"
		public Keyword getEndKeyword_4() { return cEndKeyword_4; }
	}
	public class MoveStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.MoveStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Assignment cCommandAssignment_0 = (Assignment)cGroup.eContents().get(0);
		private final RuleCall cCommandMoveCommandEnumRuleCall_0_0 = (RuleCall)cCommandAssignment_0.eContents().get(0);
		private final Keyword cLeftParenthesisKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Assignment cStepsAssignment_2 = (Assignment)cGroup.eContents().get(2);
		private final RuleCall cStepsAdditionParserRuleCall_2_0 = (RuleCall)cStepsAssignment_2.eContents().get(0);
		private final Keyword cRightParenthesisKeyword_3 = (Keyword)cGroup.eContents().get(3);
		
		//MoveStatement:
		//    command = MoveCommand "(" steps = Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//command = MoveCommand "(" steps = Addition ")"
		public Group getGroup() { return cGroup; }
		
		//command = MoveCommand
		public Assignment getCommandAssignment_0() { return cCommandAssignment_0; }
		
		//MoveCommand
		public RuleCall getCommandMoveCommandEnumRuleCall_0_0() { return cCommandMoveCommandEnumRuleCall_0_0; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_1() { return cLeftParenthesisKeyword_1; }
		
		//steps = Addition
		public Assignment getStepsAssignment_2() { return cStepsAssignment_2; }
		
		//Addition
		public RuleCall getStepsAdditionParserRuleCall_2_0() { return cStepsAdditionParserRuleCall_2_0; }
		
		//")"
		public Keyword getRightParenthesisKeyword_3() { return cRightParenthesisKeyword_3; }
	}
	public class TurnStatementElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.TurnStatement");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cTurnKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Assignment cCommandAssignment_1 = (Assignment)cGroup.eContents().get(1);
		private final RuleCall cCommandTurnCommandEnumRuleCall_1_0 = (RuleCall)cCommandAssignment_1.eContents().get(0);
		
		//TurnStatement:
		//    "turn" command = TurnCommand
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"turn" command = TurnCommand
		public Group getGroup() { return cGroup; }
		
		//"turn"
		public Keyword getTurnKeyword_0() { return cTurnKeyword_0; }
		
		//command = TurnCommand
		public Assignment getCommandAssignment_1() { return cCommandAssignment_1; }
		
		//TurnCommand
		public RuleCall getCommandTurnCommandEnumRuleCall_1_0() { return cCommandTurnCommandEnumRuleCall_1_0; }
	}
	public class AdditionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Addition");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cMultiplicationParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cAdditionLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorPlusSignKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorHyphenMinusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightMultiplicationParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Addition returns Expression:
		//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup() { return cGroup; }
		
		//Multiplication
		public RuleCall getMultiplicationParserRuleCall_0() { return cMultiplicationParserRuleCall_0; }
		
		//({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Addition.left = current}
		public Action getAdditionLeftAction_1_0() { return cAdditionLeftAction_1_0; }
		
		//operator+=("+"|"-")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("+"|"-")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"+"
		public Keyword getOperatorPlusSignKeyword_1_1_0_0() { return cOperatorPlusSignKeyword_1_1_0_0; }
		
		//"-"
		public Keyword getOperatorHyphenMinusKeyword_1_1_0_1() { return cOperatorHyphenMinusKeyword_1_1_0_1; }
		
		//right+=Multiplication
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Multiplication
		public RuleCall getRightMultiplicationParserRuleCall_1_2_0() { return cRightMultiplicationParserRuleCall_1_2_0; }
	}
	public class MultiplicationElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Multiplication");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final RuleCall cPrimaryParserRuleCall_0 = (RuleCall)cGroup.eContents().get(0);
		private final Group cGroup_1 = (Group)cGroup.eContents().get(1);
		private final Action cMultiplicationLeftAction_1_0 = (Action)cGroup_1.eContents().get(0);
		private final Assignment cOperatorAssignment_1_1 = (Assignment)cGroup_1.eContents().get(1);
		private final Alternatives cOperatorAlternatives_1_1_0 = (Alternatives)cOperatorAssignment_1_1.eContents().get(0);
		private final Keyword cOperatorAsteriskKeyword_1_1_0_0 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(0);
		private final Keyword cOperatorSolidusKeyword_1_1_0_1 = (Keyword)cOperatorAlternatives_1_1_0.eContents().get(1);
		private final Assignment cRightAssignment_1_2 = (Assignment)cGroup_1.eContents().get(2);
		private final RuleCall cRightPrimaryParserRuleCall_1_2_0 = (RuleCall)cRightAssignment_1_2.eContents().get(0);
		
		//Multiplication returns Expression:
		//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup() { return cGroup; }
		
		//Primary
		public RuleCall getPrimaryParserRuleCall_0() { return cPrimaryParserRuleCall_0; }
		
		//({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
		public Group getGroup_1() { return cGroup_1; }
		
		//{Multiplication.left = current}
		public Action getMultiplicationLeftAction_1_0() { return cMultiplicationLeftAction_1_0; }
		
		//operator+=("*"|"/")
		public Assignment getOperatorAssignment_1_1() { return cOperatorAssignment_1_1; }
		
		//("*"|"/")
		public Alternatives getOperatorAlternatives_1_1_0() { return cOperatorAlternatives_1_1_0; }
		
		//"*"
		public Keyword getOperatorAsteriskKeyword_1_1_0_0() { return cOperatorAsteriskKeyword_1_1_0_0; }
		
		//"/"
		public Keyword getOperatorSolidusKeyword_1_1_0_1() { return cOperatorSolidusKeyword_1_1_0_1; }
		
		//right+=Primary
		public Assignment getRightAssignment_1_2() { return cRightAssignment_1_2; }
		
		//Primary
		public RuleCall getRightPrimaryParserRuleCall_1_2_0() { return cRightPrimaryParserRuleCall_1_2_0; }
	}
	public class PrimaryElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Primary");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final RuleCall cIntLiteralParserRuleCall_0 = (RuleCall)cAlternatives.eContents().get(0);
		private final RuleCall cIntVarExpressionParserRuleCall_1 = (RuleCall)cAlternatives.eContents().get(1);
		private final Group cGroup_2 = (Group)cAlternatives.eContents().get(2);
		private final Keyword cLeftParenthesisKeyword_2_0 = (Keyword)cGroup_2.eContents().get(0);
		private final RuleCall cAdditionParserRuleCall_2_1 = (RuleCall)cGroup_2.eContents().get(1);
		private final Keyword cRightParenthesisKeyword_2_2 = (Keyword)cGroup_2.eContents().get(2);
		
		//Primary returns Expression:
		//    IntLiteral |
		//    IntVarExpression |
		//    "(" Addition ")"
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//IntLiteral |
		//IntVarExpression |
		//"(" Addition ")"
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//IntLiteral
		public RuleCall getIntLiteralParserRuleCall_0() { return cIntLiteralParserRuleCall_0; }
		
		//IntVarExpression
		public RuleCall getIntVarExpressionParserRuleCall_1() { return cIntVarExpressionParserRuleCall_1; }
		
		//"(" Addition ")"
		public Group getGroup_2() { return cGroup_2; }
		
		//"("
		public Keyword getLeftParenthesisKeyword_2_0() { return cLeftParenthesisKeyword_2_0; }
		
		//Addition
		public RuleCall getAdditionParserRuleCall_2_1() { return cAdditionParserRuleCall_2_1; }
		
		//")"
		public Keyword getRightParenthesisKeyword_2_2() { return cRightParenthesisKeyword_2_2; }
	}
	public class IntLiteralElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.IntLiteral");
		private final Assignment cValAssignment = (Assignment)rule.eContents().get(1);
		private final RuleCall cValINTTerminalRuleCall_0 = (RuleCall)cValAssignment.eContents().get(0);
		
		//IntLiteral:
		//    val = INT
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//val = INT
		public Assignment getValAssignment() { return cValAssignment; }
		
		//INT
		public RuleCall getValINTTerminalRuleCall_0() { return cValINTTerminalRuleCall_0; }
	}
	public class IntVarExpressionElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.IntVarExpression");
		private final Assignment cVarAssignment = (Assignment)rule.eContents().get(1);
		private final CrossReference cVarVariableDeclarationCrossReference_0 = (CrossReference)cVarAssignment.eContents().get(0);
		private final RuleCall cVarVariableDeclarationIDTerminalRuleCall_0_1 = (RuleCall)cVarVariableDeclarationCrossReference_0.eContents().get(1);
		
		//IntVarExpression:
		//    var = [VariableDeclaration]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//var = [VariableDeclaration]
		public Assignment getVarAssignment() { return cVarAssignment; }
		
		//[VariableDeclaration]
		public CrossReference getVarVariableDeclarationCrossReference_0() { return cVarVariableDeclarationCrossReference_0; }
		
		//ID
		public RuleCall getVarVariableDeclarationIDTerminalRuleCall_0_1() { return cVarVariableDeclarationIDTerminalRuleCall_0_1; }
	}
	public class CheckoutElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Checkout");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cGoKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTillKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cScanAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cScanScanParserRuleCall_3_0 = (RuleCall)cScanAssignment_3.eContents().get(0);
		private final Assignment cPayAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cPayPayEnumRuleCall_4_0 = (RuleCall)cPayAssignment_4.eContents().get(0);
		
		//Checkout:
		//    "go" "to" "till"
		//    scan += Scan+
		//    pay = Pay
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"go" "to" "till"
		//scan += Scan+
		//pay = Pay
		public Group getGroup() { return cGroup; }
		
		//"go"
		public Keyword getGoKeyword_0() { return cGoKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"till"
		public Keyword getTillKeyword_2() { return cTillKeyword_2; }
		
		//scan += Scan+
		public Assignment getScanAssignment_3() { return cScanAssignment_3; }
		
		//Scan
		public RuleCall getScanScanParserRuleCall_3_0() { return cScanScanParserRuleCall_3_0; }
		
		//pay = Pay
		public Assignment getPayAssignment_4() { return cPayAssignment_4; }
		
		//Pay
		public RuleCall getPayPayEnumRuleCall_4_0() { return cPayPayEnumRuleCall_4_0; }
	}
	public class ScanElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Scan");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cScanKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cAtKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cTillKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cNameAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final RuleCall cNameIDTerminalRuleCall_3_0 = (RuleCall)cNameAssignment_3.eContents().get(0);
		private final Assignment cAddToBagAssignment_4 = (Assignment)cGroup.eContents().get(4);
		private final RuleCall cAddToBagAddToBagParserRuleCall_4_0 = (RuleCall)cAddToBagAssignment_4.eContents().get(0);
		
		//Scan:
		//    "scan" "at" "till" name=ID
		//    addToBag += AddToBag*
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"scan" "at" "till" name=ID
		//addToBag += AddToBag*
		public Group getGroup() { return cGroup; }
		
		//"scan"
		public Keyword getScanKeyword_0() { return cScanKeyword_0; }
		
		//"at"
		public Keyword getAtKeyword_1() { return cAtKeyword_1; }
		
		//"till"
		public Keyword getTillKeyword_2() { return cTillKeyword_2; }
		
		//name=ID
		public Assignment getNameAssignment_3() { return cNameAssignment_3; }
		
		//ID
		public RuleCall getNameIDTerminalRuleCall_3_0() { return cNameIDTerminalRuleCall_3_0; }
		
		//addToBag += AddToBag*
		public Assignment getAddToBagAssignment_4() { return cAddToBagAssignment_4; }
		
		//AddToBag
		public RuleCall getAddToBagAddToBagParserRuleCall_4_0() { return cAddToBagAddToBagParserRuleCall_4_0; }
	}
	public class AddToBagElements extends AbstractParserRuleElementFinder {
		private final ParserRule rule = (ParserRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.AddToBag");
		private final Group cGroup = (Group)rule.eContents().get(1);
		private final Keyword cAddKeyword_0 = (Keyword)cGroup.eContents().get(0);
		private final Keyword cToKeyword_1 = (Keyword)cGroup.eContents().get(1);
		private final Keyword cBagKeyword_2 = (Keyword)cGroup.eContents().get(2);
		private final Assignment cBagItemAssignment_3 = (Assignment)cGroup.eContents().get(3);
		private final CrossReference cBagItemScanCrossReference_3_0 = (CrossReference)cBagItemAssignment_3.eContents().get(0);
		private final RuleCall cBagItemScanIDTerminalRuleCall_3_0_1 = (RuleCall)cBagItemScanCrossReference_3_0.eContents().get(1);
		
		//AddToBag:
		//    "add" "to" "bag" bagItem=[Scan]
		//;
		@Override public ParserRule getRule() { return rule; }
		
		//"add" "to" "bag" bagItem=[Scan]
		public Group getGroup() { return cGroup; }
		
		//"add"
		public Keyword getAddKeyword_0() { return cAddKeyword_0; }
		
		//"to"
		public Keyword getToKeyword_1() { return cToKeyword_1; }
		
		//"bag"
		public Keyword getBagKeyword_2() { return cBagKeyword_2; }
		
		//bagItem=[Scan]
		public Assignment getBagItemAssignment_3() { return cBagItemAssignment_3; }
		
		//[Scan]
		public CrossReference getBagItemScanCrossReference_3_0() { return cBagItemScanCrossReference_3_0; }
		
		//ID
		public RuleCall getBagItemScanIDTerminalRuleCall_3_0_1() { return cBagItemScanIDTerminalRuleCall_3_0_1; }
	}
	
	public class MoveCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.MoveCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cForwardEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cForwardForwardKeyword_0_0 = (Keyword)cForwardEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cBackwardEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cBackwardBackwardKeyword_1_0 = (Keyword)cBackwardEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum MoveCommand:
		//    forward | backward
		//;
		public EnumRule getRule() { return rule; }
		
		//forward | backward
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//forward
		public EnumLiteralDeclaration getForwardEnumLiteralDeclaration_0() { return cForwardEnumLiteralDeclaration_0; }
		
		public Keyword getForwardForwardKeyword_0_0() { return cForwardForwardKeyword_0_0; }
		
		//backward
		public EnumLiteralDeclaration getBackwardEnumLiteralDeclaration_1() { return cBackwardEnumLiteralDeclaration_1; }
		
		public Keyword getBackwardBackwardKeyword_1_0() { return cBackwardBackwardKeyword_1_0; }
	}
	public class TurnCommandElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.TurnCommand");
		private final Alternatives cAlternatives = (Alternatives)rule.eContents().get(1);
		private final EnumLiteralDeclaration cLeftEnumLiteralDeclaration_0 = (EnumLiteralDeclaration)cAlternatives.eContents().get(0);
		private final Keyword cLeftLeftKeyword_0_0 = (Keyword)cLeftEnumLiteralDeclaration_0.eContents().get(0);
		private final EnumLiteralDeclaration cRightEnumLiteralDeclaration_1 = (EnumLiteralDeclaration)cAlternatives.eContents().get(1);
		private final Keyword cRightRightKeyword_1_0 = (Keyword)cRightEnumLiteralDeclaration_1.eContents().get(0);
		
		//enum TurnCommand:
		//    left | right
		//;
		public EnumRule getRule() { return rule; }
		
		//left | right
		public Alternatives getAlternatives() { return cAlternatives; }
		
		//left
		public EnumLiteralDeclaration getLeftEnumLiteralDeclaration_0() { return cLeftEnumLiteralDeclaration_0; }
		
		public Keyword getLeftLeftKeyword_0_0() { return cLeftLeftKeyword_0_0; }
		
		//right
		public EnumLiteralDeclaration getRightEnumLiteralDeclaration_1() { return cRightEnumLiteralDeclaration_1; }
		
		public Keyword getRightRightKeyword_1_0() { return cRightRightKeyword_1_0; }
	}
	public class PayElements extends AbstractElementFinder.AbstractEnumRuleElementFinder {
		private final EnumRule rule = (EnumRule) GrammarUtil.findRuleForName(getGrammar(), "self_checkout_experience.SelfCheckoutExperience.Pay");
		private final EnumLiteralDeclaration cPayEnumLiteralDeclaration = (EnumLiteralDeclaration)rule.eContents().get(1);
		private final Keyword cPayPayKeyword_0 = (Keyword)cPayEnumLiteralDeclaration.eContents().get(0);
		
		//enum Pay:
		//    pay
		//;
		public EnumRule getRule() { return rule; }
		
		//pay
		public EnumLiteralDeclaration getPayEnumLiteralDeclaration() { return cPayEnumLiteralDeclaration; }
		
		public Keyword getPayPayKeyword_0() { return cPayPayKeyword_0; }
	}
	
	private final Self_checkoutElements pSelf_checkout;
	private final PickStatementElements pPickStatement;
	private final ItemDefElements pItemDef;
	private final AddToBasketElements pAddToBasket;
	private final DropElements pDrop;
	private final WalkStatementElements pWalkStatement;
	private final VariableDeclarationElements pVariableDeclaration;
	private final RepeatElements pRepeat;
	private final MoveStatementElements pMoveStatement;
	private final MoveCommandElements eMoveCommand;
	private final TurnStatementElements pTurnStatement;
	private final TurnCommandElements eTurnCommand;
	private final AdditionElements pAddition;
	private final MultiplicationElements pMultiplication;
	private final PrimaryElements pPrimary;
	private final IntLiteralElements pIntLiteral;
	private final IntVarExpressionElements pIntVarExpression;
	private final CheckoutElements pCheckout;
	private final ScanElements pScan;
	private final AddToBagElements pAddToBag;
	private final PayElements ePay;
	
	private final Grammar grammar;
	
	private final TerminalsGrammarAccess gaTerminals;

	@Inject
	public SelfCheckoutExperienceGrammarAccess(GrammarProvider grammarProvider,
			TerminalsGrammarAccess gaTerminals) {
		this.grammar = internalFindGrammar(grammarProvider);
		this.gaTerminals = gaTerminals;
		this.pSelf_checkout = new Self_checkoutElements();
		this.pPickStatement = new PickStatementElements();
		this.pItemDef = new ItemDefElements();
		this.pAddToBasket = new AddToBasketElements();
		this.pDrop = new DropElements();
		this.pWalkStatement = new WalkStatementElements();
		this.pVariableDeclaration = new VariableDeclarationElements();
		this.pRepeat = new RepeatElements();
		this.pMoveStatement = new MoveStatementElements();
		this.eMoveCommand = new MoveCommandElements();
		this.pTurnStatement = new TurnStatementElements();
		this.eTurnCommand = new TurnCommandElements();
		this.pAddition = new AdditionElements();
		this.pMultiplication = new MultiplicationElements();
		this.pPrimary = new PrimaryElements();
		this.pIntLiteral = new IntLiteralElements();
		this.pIntVarExpression = new IntVarExpressionElements();
		this.pCheckout = new CheckoutElements();
		this.pScan = new ScanElements();
		this.pAddToBag = new AddToBagElements();
		this.ePay = new PayElements();
	}
	
	protected Grammar internalFindGrammar(GrammarProvider grammarProvider) {
		Grammar grammar = grammarProvider.getGrammar(this);
		while (grammar != null) {
			if ("self_checkout_experience.SelfCheckoutExperience".equals(grammar.getName())) {
				return grammar;
			}
			List<Grammar> grammars = grammar.getUsedGrammars();
			if (!grammars.isEmpty()) {
				grammar = grammars.iterator().next();
			} else {
				return null;
			}
		}
		return grammar;
	}
	
	@Override
	public Grammar getGrammar() {
		return grammar;
	}
	
	
	public TerminalsGrammarAccess getTerminalsGrammarAccess() {
		return gaTerminals;
	}

	
	//Self_checkout:
	//    (pickstatements+=PickStatement | walkstatements += WalkStatement)*
	//    checkout = Checkout?
	//;
	public Self_checkoutElements getSelf_checkoutAccess() {
		return pSelf_checkout;
	}
	
	public ParserRule getSelf_checkoutRule() {
		return getSelf_checkoutAccess().getRule();
	}
	
	//PickStatement:
	//    "pick" "up" itemCount = Addition itemPicked = ItemDef
	//    holdingItem = (AddToBasket | Drop)
	//;
	public PickStatementElements getPickStatementAccess() {
		return pPickStatement;
	}
	
	public ParserRule getPickStatementRule() {
		return getPickStatementAccess().getRule();
	}
	
	//ItemDef:
	//    name = ID
	//;
	public ItemDefElements getItemDefAccess() {
		return pItemDef;
	}
	
	public ParserRule getItemDefRule() {
		return getItemDefAccess().getRule();
	}
	
	//AddToBasket:
	//    "add" "to" "basket" itemInBasket=[ItemDef]
	//;
	public AddToBasketElements getAddToBasketAccess() {
		return pAddToBasket;
	}
	
	public ParserRule getAddToBasketRule() {
		return getAddToBasketAccess().getRule();
	}
	
	//Drop:
	//    "drop" itemDropped=[ItemDef]
	//;
	public DropElements getDropAccess() {
		return pDrop;
	}
	
	public ParserRule getDropRule() {
		return getDropAccess().getRule();
	}
	
	//WalkStatement:
	//    MoveStatement |
	//    TurnStatement |
	//    Repeat |
	//    VariableDeclaration
	//;
	public WalkStatementElements getWalkStatementAccess() {
		return pWalkStatement;
	}
	
	public ParserRule getWalkStatementRule() {
		return getWalkStatementAccess().getRule();
	}
	
	//VariableDeclaration:
	//    "var" name=ID "=" value=INT
	//;
	public VariableDeclarationElements getVariableDeclarationAccess() {
		return pVariableDeclaration;
	}
	
	public ParserRule getVariableDeclarationRule() {
		return getVariableDeclarationAccess().getRule();
	}
	
	//Repeat:
	//    "repeat" count = Addition "times:"
	//      statements += (WalkStatement | PickStatement)+
	//    "end"
	//;
	public RepeatElements getRepeatAccess() {
		return pRepeat;
	}
	
	public ParserRule getRepeatRule() {
		return getRepeatAccess().getRule();
	}
	
	//MoveStatement:
	//    command = MoveCommand "(" steps = Addition ")"
	//;
	public MoveStatementElements getMoveStatementAccess() {
		return pMoveStatement;
	}
	
	public ParserRule getMoveStatementRule() {
		return getMoveStatementAccess().getRule();
	}
	
	//enum MoveCommand:
	//    forward | backward
	//;
	public MoveCommandElements getMoveCommandAccess() {
		return eMoveCommand;
	}
	
	public EnumRule getMoveCommandRule() {
		return getMoveCommandAccess().getRule();
	}
	
	//TurnStatement:
	//    "turn" command = TurnCommand
	//;
	public TurnStatementElements getTurnStatementAccess() {
		return pTurnStatement;
	}
	
	public ParserRule getTurnStatementRule() {
		return getTurnStatementAccess().getRule();
	}
	
	//enum TurnCommand:
	//    left | right
	//;
	public TurnCommandElements getTurnCommandAccess() {
		return eTurnCommand;
	}
	
	public EnumRule getTurnCommandRule() {
		return getTurnCommandAccess().getRule();
	}
	
	//Addition returns Expression:
	//    Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
	//;
	public AdditionElements getAdditionAccess() {
		return pAddition;
	}
	
	public ParserRule getAdditionRule() {
		return getAdditionAccess().getRule();
	}
	
	//Multiplication returns Expression:
	//    Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
	//;
	public MultiplicationElements getMultiplicationAccess() {
		return pMultiplication;
	}
	
	public ParserRule getMultiplicationRule() {
		return getMultiplicationAccess().getRule();
	}
	
	//Primary returns Expression:
	//    IntLiteral |
	//    IntVarExpression |
	//    "(" Addition ")"
	//;
	public PrimaryElements getPrimaryAccess() {
		return pPrimary;
	}
	
	public ParserRule getPrimaryRule() {
		return getPrimaryAccess().getRule();
	}
	
	//IntLiteral:
	//    val = INT
	//;
	public IntLiteralElements getIntLiteralAccess() {
		return pIntLiteral;
	}
	
	public ParserRule getIntLiteralRule() {
		return getIntLiteralAccess().getRule();
	}
	
	//IntVarExpression:
	//    var = [VariableDeclaration]
	//;
	public IntVarExpressionElements getIntVarExpressionAccess() {
		return pIntVarExpression;
	}
	
	public ParserRule getIntVarExpressionRule() {
		return getIntVarExpressionAccess().getRule();
	}
	
	//Checkout:
	//    "go" "to" "till"
	//    scan += Scan+
	//    pay = Pay
	//;
	public CheckoutElements getCheckoutAccess() {
		return pCheckout;
	}
	
	public ParserRule getCheckoutRule() {
		return getCheckoutAccess().getRule();
	}
	
	//Scan:
	//    "scan" "at" "till" name=ID
	//    addToBag += AddToBag*
	//;
	public ScanElements getScanAccess() {
		return pScan;
	}
	
	public ParserRule getScanRule() {
		return getScanAccess().getRule();
	}
	
	//AddToBag:
	//    "add" "to" "bag" bagItem=[Scan]
	//;
	public AddToBagElements getAddToBagAccess() {
		return pAddToBag;
	}
	
	public ParserRule getAddToBagRule() {
		return getAddToBagAccess().getRule();
	}
	
	//enum Pay:
	//    pay
	//;
	public PayElements getPayAccess() {
		return ePay;
	}
	
	public EnumRule getPayRule() {
		return getPayAccess().getRule();
	}
	
	//terminal ID: '^'?('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;
	public TerminalRule getIDRule() {
		return gaTerminals.getIDRule();
	}
	
	//terminal INT returns ecore::EInt: ('0'..'9')+;
	public TerminalRule getINTRule() {
		return gaTerminals.getINTRule();
	}
	
	//terminal STRING:
	//            '"' ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|'"') )* '"' |
	//            "'" ( '\\' . /* 'b'|'t'|'n'|'f'|'r'|'u'|'"'|"'"|'\\' */ | !('\\'|"'") )* "'"
	//        ;
	public TerminalRule getSTRINGRule() {
		return gaTerminals.getSTRINGRule();
	}
	
	//terminal ML_COMMENT : '/*' -> '*/';
	public TerminalRule getML_COMMENTRule() {
		return gaTerminals.getML_COMMENTRule();
	}
	
	//terminal SL_COMMENT : '//' !('\n'|'\r')* ('\r'? '\n')?;
	public TerminalRule getSL_COMMENTRule() {
		return gaTerminals.getSL_COMMENTRule();
	}
	
	//terminal WS         : (' '|'\t'|'\r'|'\n')+;
	public TerminalRule getWSRule() {
		return gaTerminals.getWSRule();
	}
	
	//terminal ANY_OTHER: .;
	public TerminalRule getANY_OTHERRule() {
		return gaTerminals.getANY_OTHERRule();
	}
}
