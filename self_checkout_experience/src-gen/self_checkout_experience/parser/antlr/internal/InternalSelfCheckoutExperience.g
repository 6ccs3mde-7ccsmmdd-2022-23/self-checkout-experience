/*
 * generated by Xtext 2.25.0
 */
grammar InternalSelfCheckoutExperience;

options {
	superClass=AbstractInternalAntlrParser;
}

@lexer::header {
package self_checkout_experience.parser.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.parser.antlr.Lexer;
}

@parser::header {
package self_checkout_experience.parser.antlr.internal;

import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.emf.common.util.Enumerator;
import org.eclipse.xtext.parser.antlr.AbstractInternalAntlrParser;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.parser.antlr.AntlrDatatypeRuleToken;
import self_checkout_experience.services.SelfCheckoutExperienceGrammarAccess;

}

@parser::members {

 	private SelfCheckoutExperienceGrammarAccess grammarAccess;

    public InternalSelfCheckoutExperienceParser(TokenStream input, SelfCheckoutExperienceGrammarAccess grammarAccess) {
        this(input);
        this.grammarAccess = grammarAccess;
        registerRules(grammarAccess.getGrammar());
    }

    @Override
    protected String getFirstRuleName() {
    	return "Self_checkout";
   	}

   	@Override
   	protected SelfCheckoutExperienceGrammarAccess getGrammarAccess() {
   		return grammarAccess;
   	}

}

@rulecatch {
    catch (RecognitionException re) {
        recover(input,re);
        appendSkippedTokens();
    }
}

// Entry rule entryRuleSelf_checkout
entryRuleSelf_checkout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getSelf_checkoutRule()); }
	iv_ruleSelf_checkout=ruleSelf_checkout
	{ $current=$iv_ruleSelf_checkout.current; }
	EOF;

// Rule Self_checkout
ruleSelf_checkout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getSelf_checkoutAccess().getPickScanMachineHoldSelfScannerParserRuleCall_0_0());
				}
				lv_pickScanMachine_0_0=ruleHoldSelfScanner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelf_checkoutRule());
					}
					set(
						$current,
						"pickScanMachine",
						lv_pickScanMachine_0_0,
						"self_checkout_experience.SelfCheckoutExperience.HoldSelfScanner");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getSelf_checkoutAccess().getPickstatementsPickStatementParserRuleCall_1_0_0());
					}
					lv_pickstatements_1_0=rulePickStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelf_checkoutRule());
						}
						add(
							$current,
							"pickstatements",
							lv_pickstatements_1_0,
							"self_checkout_experience.SelfCheckoutExperience.PickStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
			    |
			(
				(
					{
						newCompositeNode(grammarAccess.getSelf_checkoutAccess().getWalkstatementsWalkStatementParserRuleCall_1_1_0());
					}
					lv_walkstatements_2_0=ruleWalkStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getSelf_checkoutRule());
						}
						add(
							$current,
							"walkstatements",
							lv_walkstatements_2_0,
							"self_checkout_experience.SelfCheckoutExperience.WalkStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
		(
			(
				{
					newCompositeNode(grammarAccess.getSelf_checkoutAccess().getCheckoutCheckoutParserRuleCall_2_0());
				}
				lv_checkout_3_0=ruleCheckout
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getSelf_checkoutRule());
					}
					set(
						$current,
						"checkout",
						lv_checkout_3_0,
						"self_checkout_experience.SelfCheckoutExperience.Checkout");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleHoldSelfScanner
entryRuleHoldSelfScanner returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getHoldSelfScannerRule()); }
	iv_ruleHoldSelfScanner=ruleHoldSelfScanner
	{ $current=$iv_ruleHoldSelfScanner.current; }
	EOF;

// Rule HoldSelfScanner
ruleHoldSelfScanner returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='hold'
		{
			newLeafNode(otherlv_0, grammarAccess.getHoldSelfScannerAccess().getHoldKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getHoldSelfScannerAccess().getScanMachineSelfScannerEnumRuleCall_1_0());
				}
				lv_scanMachine_1_0=ruleSelfScanner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getHoldSelfScannerRule());
					}
					set(
						$current,
						"scanMachine",
						lv_scanMachine_1_0,
						"self_checkout_experience.SelfCheckoutExperience.SelfScanner");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRulePickStatement
entryRulePickStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPickStatementRule()); }
	iv_rulePickStatement=rulePickStatement
	{ $current=$iv_rulePickStatement.current; }
	EOF;

// Rule PickStatement
rulePickStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='pick'
		{
			newLeafNode(otherlv_0, grammarAccess.getPickStatementAccess().getPickKeyword_0());
		}
		otherlv_1='up'
		{
			newLeafNode(otherlv_1, grammarAccess.getPickStatementAccess().getUpKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getPickStatementAccess().getItemCountAdditionParserRuleCall_2_0());
				}
				lv_itemCount_2_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPickStatementRule());
					}
					set(
						$current,
						"itemCount",
						lv_itemCount_2_0,
						"self_checkout_experience.SelfCheckoutExperience.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getPickStatementAccess().getItemPickedItemDefParserRuleCall_3_0());
				}
				lv_itemPicked_3_0=ruleItemDef
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getPickStatementRule());
					}
					set(
						$current,
						"itemPicked",
						lv_itemPicked_3_0,
						"self_checkout_experience.SelfCheckoutExperience.ItemDef");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getPickStatementAccess().getHoldingItemScanAndAddToBasketParserRuleCall_4_0_0());
					}
					lv_holdingItem_4_1=ruleScanAndAddToBasket
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPickStatementRule());
						}
						set(
							$current,
							"holdingItem",
							lv_holdingItem_4_1,
							"self_checkout_experience.SelfCheckoutExperience.ScanAndAddToBasket");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getPickStatementAccess().getHoldingItemDropParserRuleCall_4_0_1());
					}
					lv_holdingItem_4_2=ruleDrop
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getPickStatementRule());
						}
						set(
							$current,
							"holdingItem",
							lv_holdingItem_4_2,
							"self_checkout_experience.SelfCheckoutExperience.Drop");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)
	)
;

// Entry rule entryRuleItemDef
entryRuleItemDef returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getItemDefRule()); }
	iv_ruleItemDef=ruleItemDef
	{ $current=$iv_ruleItemDef.current; }
	EOF;

// Rule ItemDef
ruleItemDef returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_name_0_0=RULE_ID
			{
				newLeafNode(lv_name_0_0, grammarAccess.getItemDefAccess().getNameIDTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getItemDefRule());
				}
				setWithLastConsumed(
					$current,
					"name",
					lv_name_0_0,
					"org.eclipse.xtext.common.Terminals.ID");
			}
		)
	)
;

// Entry rule entryRuleScanAndAddToBasket
entryRuleScanAndAddToBasket returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScanAndAddToBasketRule()); }
	iv_ruleScanAndAddToBasket=ruleScanAndAddToBasket
	{ $current=$iv_ruleScanAndAddToBasket.current; }
	EOF;

// Rule ScanAndAddToBasket
ruleScanAndAddToBasket returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scan'
		{
			newLeafNode(otherlv_0, grammarAccess.getScanAndAddToBasketAccess().getScanKeyword_0());
		}
		otherlv_1='and'
		{
			newLeafNode(otherlv_1, grammarAccess.getScanAndAddToBasketAccess().getAndKeyword_1());
		}
		otherlv_2='add'
		{
			newLeafNode(otherlv_2, grammarAccess.getScanAndAddToBasketAccess().getAddKeyword_2());
		}
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getScanAndAddToBasketAccess().getToKeyword_3());
		}
		otherlv_4='basket'
		{
			newLeafNode(otherlv_4, grammarAccess.getScanAndAddToBasketAccess().getBasketKeyword_4());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getScanAndAddToBasketRule());
					}
				}
				otherlv_5=RULE_ID
				{
					newLeafNode(otherlv_5, grammarAccess.getScanAndAddToBasketAccess().getItemInBasketItemDefCrossReference_5_0());
				}
			)
		)
	)
;

// Entry rule entryRuleDrop
entryRuleDrop returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getDropRule()); }
	iv_ruleDrop=ruleDrop
	{ $current=$iv_ruleDrop.current; }
	EOF;

// Rule Drop
ruleDrop returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='drop'
		{
			newLeafNode(otherlv_0, grammarAccess.getDropAccess().getDropKeyword_0());
		}
		(
			(
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getDropRule());
					}
				}
				otherlv_1=RULE_ID
				{
					newLeafNode(otherlv_1, grammarAccess.getDropAccess().getItemDroppedItemDefCrossReference_1_0());
				}
			)
		)
	)
;

// Entry rule entryRuleWalkStatement
entryRuleWalkStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getWalkStatementRule()); }
	iv_ruleWalkStatement=ruleWalkStatement
	{ $current=$iv_ruleWalkStatement.current; }
	EOF;

// Rule WalkStatement
ruleWalkStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getWalkStatementAccess().getMoveStatementParserRuleCall_0());
		}
		this_MoveStatement_0=ruleMoveStatement
		{
			$current = $this_MoveStatement_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWalkStatementAccess().getTurnStatementParserRuleCall_1());
		}
		this_TurnStatement_1=ruleTurnStatement
		{
			$current = $this_TurnStatement_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWalkStatementAccess().getRepeatParserRuleCall_2());
		}
		this_Repeat_2=ruleRepeat
		{
			$current = $this_Repeat_2.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getWalkStatementAccess().getVariableDeclarationParserRuleCall_3());
		}
		this_VariableDeclaration_3=ruleVariableDeclaration
		{
			$current = $this_VariableDeclaration_3.current;
			afterParserOrEnumRuleCall();
		}
	)
;

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getVariableDeclarationRule()); }
	iv_ruleVariableDeclaration=ruleVariableDeclaration
	{ $current=$iv_ruleVariableDeclaration.current; }
	EOF;

// Rule VariableDeclaration
ruleVariableDeclaration returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='var'
		{
			newLeafNode(otherlv_0, grammarAccess.getVariableDeclarationAccess().getVarKeyword_0());
		}
		(
			(
				lv_name_1_0=RULE_ID
				{
					newLeafNode(lv_name_1_0, grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"name",
						lv_name_1_0,
						"org.eclipse.xtext.common.Terminals.ID");
				}
			)
		)
		otherlv_2='='
		{
			newLeafNode(otherlv_2, grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2());
		}
		(
			(
				lv_value_3_0=RULE_INT
				{
					newLeafNode(lv_value_3_0, grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0());
				}
				{
					if ($current==null) {
						$current = createModelElement(grammarAccess.getVariableDeclarationRule());
					}
					setWithLastConsumed(
						$current,
						"value",
						lv_value_3_0,
						"org.eclipse.xtext.common.Terminals.INT");
				}
			)
		)
	)
;

// Entry rule entryRuleRepeat
entryRuleRepeat returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getRepeatRule()); }
	iv_ruleRepeat=ruleRepeat
	{ $current=$iv_ruleRepeat.current; }
	EOF;

// Rule Repeat
ruleRepeat returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='repeat'
		{
			newLeafNode(otherlv_0, grammarAccess.getRepeatAccess().getRepeatKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getRepeatAccess().getCountAdditionParserRuleCall_1_0());
				}
				lv_count_1_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getRepeatRule());
					}
					set(
						$current,
						"count",
						lv_count_1_0,
						"self_checkout_experience.SelfCheckoutExperience.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_2='times:'
		{
			newLeafNode(otherlv_2, grammarAccess.getRepeatAccess().getTimesKeyword_2());
		}
		(
			(
				(
					{
						newCompositeNode(grammarAccess.getRepeatAccess().getStatementsWalkStatementParserRuleCall_3_0_0());
					}
					lv_statements_3_1=ruleWalkStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepeatRule());
						}
						add(
							$current,
							"statements",
							lv_statements_3_1,
							"self_checkout_experience.SelfCheckoutExperience.WalkStatement");
						afterParserOrEnumRuleCall();
					}
					    |
					{
						newCompositeNode(grammarAccess.getRepeatAccess().getStatementsPickStatementParserRuleCall_3_0_1());
					}
					lv_statements_3_2=rulePickStatement
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getRepeatRule());
						}
						add(
							$current,
							"statements",
							lv_statements_3_2,
							"self_checkout_experience.SelfCheckoutExperience.PickStatement");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)+
		otherlv_4='end'
		{
			newLeafNode(otherlv_4, grammarAccess.getRepeatAccess().getEndKeyword_4());
		}
	)
;

// Entry rule entryRuleMoveStatement
entryRuleMoveStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMoveStatementRule()); }
	iv_ruleMoveStatement=ruleMoveStatement
	{ $current=$iv_ruleMoveStatement.current; }
	EOF;

// Rule MoveStatement
ruleMoveStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveStatementAccess().getCommandMoveCommandEnumRuleCall_0_0());
				}
				lv_command_0_0=ruleMoveCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveStatementRule());
					}
					set(
						$current,
						"command",
						lv_command_0_0,
						"self_checkout_experience.SelfCheckoutExperience.MoveCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_1='('
		{
			newLeafNode(otherlv_1, grammarAccess.getMoveStatementAccess().getLeftParenthesisKeyword_1());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getMoveStatementAccess().getStepsAdditionParserRuleCall_2_0());
				}
				lv_steps_2_0=ruleAddition
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getMoveStatementRule());
					}
					set(
						$current,
						"steps",
						lv_steps_2_0,
						"self_checkout_experience.SelfCheckoutExperience.Addition");
					afterParserOrEnumRuleCall();
				}
			)
		)
		otherlv_3=')'
		{
			newLeafNode(otherlv_3, grammarAccess.getMoveStatementAccess().getRightParenthesisKeyword_3());
		}
	)
;

// Entry rule entryRuleTurnStatement
entryRuleTurnStatement returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getTurnStatementRule()); }
	iv_ruleTurnStatement=ruleTurnStatement
	{ $current=$iv_ruleTurnStatement.current; }
	EOF;

// Rule TurnStatement
ruleTurnStatement returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='turn'
		{
			newLeafNode(otherlv_0, grammarAccess.getTurnStatementAccess().getTurnKeyword_0());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getTurnStatementAccess().getCommandTurnCommandEnumRuleCall_1_0());
				}
				lv_command_1_0=ruleTurnCommand
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getTurnStatementRule());
					}
					set(
						$current,
						"command",
						lv_command_1_0,
						"self_checkout_experience.SelfCheckoutExperience.TurnCommand");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleAddition
entryRuleAddition returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAdditionRule()); }
	iv_ruleAddition=ruleAddition
	{ $current=$iv_ruleAddition.current; }
	EOF;

// Rule Addition
ruleAddition returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0());
		}
		this_Multiplication_0=ruleMultiplication
		{
			$current = $this_Multiplication_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='+'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='-'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getAdditionRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0());
					}
					lv_right_3_0=ruleMultiplication
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getAdditionRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"self_checkout_experience.SelfCheckoutExperience.Multiplication");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRuleMultiplication
entryRuleMultiplication returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getMultiplicationRule()); }
	iv_ruleMultiplication=ruleMultiplication
	{ $current=$iv_ruleMultiplication.current; }
	EOF;

// Rule Multiplication
ruleMultiplication returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0());
		}
		this_Primary_0=rulePrimary
		{
			$current = $this_Primary_0.current;
			afterParserOrEnumRuleCall();
		}
		(
			(
				{
					$current = forceCreateModelElementAndSet(
						grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0(),
						$current);
				}
			)
			(
				(
					(
						lv_operator_2_1='*'
						{
							newLeafNode(lv_operator_2_1, grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_1, null);
						}
						    |
						lv_operator_2_2='/'
						{
							newLeafNode(lv_operator_2_2, grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1());
						}
						{
							if ($current==null) {
								$current = createModelElement(grammarAccess.getMultiplicationRule());
							}
							addWithLastConsumed($current, "operator", lv_operator_2_2, null);
						}
					)
				)
			)
			(
				(
					{
						newCompositeNode(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0());
					}
					lv_right_3_0=rulePrimary
					{
						if ($current==null) {
							$current = createModelElementForParent(grammarAccess.getMultiplicationRule());
						}
						add(
							$current,
							"right",
							lv_right_3_0,
							"self_checkout_experience.SelfCheckoutExperience.Primary");
						afterParserOrEnumRuleCall();
					}
				)
			)
		)*
	)
;

// Entry rule entryRulePrimary
entryRulePrimary returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getPrimaryRule()); }
	iv_rulePrimary=rulePrimary
	{ $current=$iv_rulePrimary.current; }
	EOF;

// Rule Primary
rulePrimary returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0());
		}
		this_IntLiteral_0=ruleIntLiteral
		{
			$current = $this_IntLiteral_0.current;
			afterParserOrEnumRuleCall();
		}
		    |
		{
			newCompositeNode(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1());
		}
		this_IntVarExpression_1=ruleIntVarExpression
		{
			$current = $this_IntVarExpression_1.current;
			afterParserOrEnumRuleCall();
		}
		    |
		(
			otherlv_2='('
			{
				newLeafNode(otherlv_2, grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0());
			}
			{
				newCompositeNode(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1());
			}
			this_Addition_3=ruleAddition
			{
				$current = $this_Addition_3.current;
				afterParserOrEnumRuleCall();
			}
			otherlv_4=')'
			{
				newLeafNode(otherlv_4, grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2());
			}
		)
	)
;

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntLiteralRule()); }
	iv_ruleIntLiteral=ruleIntLiteral
	{ $current=$iv_ruleIntLiteral.current; }
	EOF;

// Rule IntLiteral
ruleIntLiteral returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			lv_val_0_0=RULE_INT
			{
				newLeafNode(lv_val_0_0, grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0());
			}
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntLiteralRule());
				}
				setWithLastConsumed(
					$current,
					"val",
					lv_val_0_0,
					"org.eclipse.xtext.common.Terminals.INT");
			}
		)
	)
;

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getIntVarExpressionRule()); }
	iv_ruleIntVarExpression=ruleIntVarExpression
	{ $current=$iv_ruleIntVarExpression.current; }
	EOF;

// Rule IntVarExpression
ruleIntVarExpression returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			{
				if ($current==null) {
					$current = createModelElement(grammarAccess.getIntVarExpressionRule());
				}
			}
			otherlv_0=RULE_ID
			{
				newLeafNode(otherlv_0, grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0());
			}
		)
	)
;

// Entry rule entryRuleCheckout
entryRuleCheckout returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getCheckoutRule()); }
	iv_ruleCheckout=ruleCheckout
	{ $current=$iv_ruleCheckout.current; }
	EOF;

// Rule Checkout
ruleCheckout returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='go'
		{
			newLeafNode(otherlv_0, grammarAccess.getCheckoutAccess().getGoKeyword_0());
		}
		otherlv_1='to'
		{
			newLeafNode(otherlv_1, grammarAccess.getCheckoutAccess().getToKeyword_1());
		}
		otherlv_2='self-checkout'
		{
			newLeafNode(otherlv_2, grammarAccess.getCheckoutAccess().getSelfCheckoutKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckoutAccess().getScanScanParserRuleCall_3_0());
				}
				lv_scan_3_0=ruleScan
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckoutRule());
					}
					set(
						$current,
						"scan",
						lv_scan_3_0,
						"self_checkout_experience.SelfCheckoutExperience.Scan");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getCheckoutAccess().getPayPayEnumRuleCall_4_0());
				}
				lv_pay_4_0=rulePay
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getCheckoutRule());
					}
					set(
						$current,
						"pay",
						lv_pay_4_0,
						"self_checkout_experience.SelfCheckoutExperience.Pay");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Entry rule entryRuleScan
entryRuleScan returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getScanRule()); }
	iv_ruleScan=ruleScan
	{ $current=$iv_ruleScan.current; }
	EOF;

// Rule Scan
ruleScan returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='scan'
		{
			newLeafNode(otherlv_0, grammarAccess.getScanAccess().getScanKeyword_0());
		}
		otherlv_1='barcode'
		{
			newLeafNode(otherlv_1, grammarAccess.getScanAccess().getBarcodeKeyword_1());
		}
		otherlv_2='with'
		{
			newLeafNode(otherlv_2, grammarAccess.getScanAccess().getWithKeyword_2());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getScanAccess().getScanMachineSelfScannerEnumRuleCall_3_0());
				}
				lv_scanMachine_3_0=ruleSelfScanner
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScanRule());
					}
					set(
						$current,
						"scanMachine",
						lv_scanMachine_3_0,
						"self_checkout_experience.SelfCheckoutExperience.SelfScanner");
					afterParserOrEnumRuleCall();
				}
			)
		)
		(
			(
				{
					newCompositeNode(grammarAccess.getScanAccess().getAddToBagAddToBagParserRuleCall_4_0());
				}
				lv_addToBag_4_0=ruleAddToBag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getScanRule());
					}
					set(
						$current,
						"addToBag",
						lv_addToBag_4_0,
						"self_checkout_experience.SelfCheckoutExperience.AddToBag");
					afterParserOrEnumRuleCall();
				}
			)
		)?
	)
;

// Entry rule entryRuleAddToBag
entryRuleAddToBag returns [EObject current=null]:
	{ newCompositeNode(grammarAccess.getAddToBagRule()); }
	iv_ruleAddToBag=ruleAddToBag
	{ $current=$iv_ruleAddToBag.current; }
	EOF;

// Rule AddToBag
ruleAddToBag returns [EObject current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		otherlv_0='add'
		{
			newLeafNode(otherlv_0, grammarAccess.getAddToBagAccess().getAddKeyword_0());
		}
		otherlv_1='all'
		{
			newLeafNode(otherlv_1, grammarAccess.getAddToBagAccess().getAllKeyword_1());
		}
		otherlv_2='items'
		{
			newLeafNode(otherlv_2, grammarAccess.getAddToBagAccess().getItemsKeyword_2());
		}
		otherlv_3='to'
		{
			newLeafNode(otherlv_3, grammarAccess.getAddToBagAccess().getToKeyword_3());
		}
		(
			(
				{
					newCompositeNode(grammarAccess.getAddToBagAccess().getBagBagEnumRuleCall_4_0());
				}
				lv_bag_4_0=ruleBag
				{
					if ($current==null) {
						$current = createModelElementForParent(grammarAccess.getAddToBagRule());
					}
					set(
						$current,
						"bag",
						lv_bag_4_0,
						"self_checkout_experience.SelfCheckoutExperience.Bag");
					afterParserOrEnumRuleCall();
				}
			)
		)
	)
;

// Rule SelfScanner
ruleSelfScanner returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='selfscanner'
		{
			$current = grammarAccess.getSelfScannerAccess().getSelfscannerEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getSelfScannerAccess().getSelfscannerEnumLiteralDeclaration());
		}
	)
;

// Rule MoveCommand
ruleMoveCommand returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='forward'
			{
				$current = grammarAccess.getMoveCommandAccess().getForwardEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getMoveCommandAccess().getForwardEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='backward'
			{
				$current = grammarAccess.getMoveCommandAccess().getBackwardEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getMoveCommandAccess().getBackwardEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule TurnCommand
ruleTurnCommand returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		(
			enumLiteral_0='left'
			{
				$current = grammarAccess.getTurnCommandAccess().getLeftEnumLiteralDeclaration_0().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_0, grammarAccess.getTurnCommandAccess().getLeftEnumLiteralDeclaration_0());
			}
		)
		    |
		(
			enumLiteral_1='right'
			{
				$current = grammarAccess.getTurnCommandAccess().getRightEnumLiteralDeclaration_1().getEnumLiteral().getInstance();
				newLeafNode(enumLiteral_1, grammarAccess.getTurnCommandAccess().getRightEnumLiteralDeclaration_1());
			}
		)
	)
;

// Rule Bag
ruleBag returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='bag'
		{
			$current = grammarAccess.getBagAccess().getBagEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getBagAccess().getBagEnumLiteralDeclaration());
		}
	)
;

// Rule Pay
rulePay returns [Enumerator current=null]
@init {
	enterRule();
}
@after {
	leaveRule();
}:
	(
		enumLiteral_0='pay'
		{
			$current = grammarAccess.getPayAccess().getPayEnumLiteralDeclaration().getEnumLiteral().getInstance();
			newLeafNode(enumLiteral_0, grammarAccess.getPayAccess().getPayEnumLiteralDeclaration());
		}
	)
;

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
