/*
 * generated by Xtext 2.25.0
 */
package self_checkout_experience.scoping

import org.eclipse.xtext.scoping.impl.AbstractDeclarativeScopeProvider
import org.eclipse.xtext.scoping.IScope
import org.eclipse.emf.ecore.EReference
import static extension org.eclipse.xtext.EcoreUtil2.*
import static org.eclipse.xtext.scoping.Scopes.*
import org.eclipse.emf.ecore.EObject
import self_checkout_experience.selfCheckoutExperience.IntVarExpression
import self_checkout_experience.selfCheckoutExperience.VariableDeclaration
import self_checkout_experience.selfCheckoutExperience.Repeat
import self_checkout_experience.selfCheckoutExperience.SelfCheckoutInstore
//import self_checkout_experience.SelfCheckoutExperienceScopeProvider

/** 
 * This class contains custom scoping description.
 * See https://www.eclipse.org/Xtext/documentation/303_runtime_concepts.html#scoping
 * on how and when to use it.
 * 
 * 
 * /*
 * generated by Xtext 2.18.0.M3
 * */
 
 
class SelfCheckoutExperienceScopeProvider extends AbstractDeclarativeScopeProvider { 


	// scope for variable declarations when walking and picking in a repeat
	def IScope scope_IntVarExpression_var_walkAndPick(IntVarExpression context, EReference ref){
		val loopContainer = context.getContainerOfType(Repeat)
		
		if (loopContainer !== null){
			loopContainer.visibleVariablesScope_walkAndPick
		}
		else{
			val containingProgram = context.getContainerOfType(SelfCheckoutInstore)
				
			scopeFor(containingProgram.statement.filter(VariableDeclaration))
		}
	}
	
	def IScope visibleVariablesScope_walkAndPick(EObject context){
		if (context instanceof Repeat){
			scopeFor(context.statement.filter(VariableDeclaration), context.eContainer.visibleVariablesScope_walkAndPick)
		}
		else if (context instanceof SelfCheckoutInstore){
			scopeFor(context.statement.filter(VariableDeclaration))
		}
	}

}


