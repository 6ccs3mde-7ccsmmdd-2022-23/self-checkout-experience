grammar self_checkout_experience.SelfCheckoutExperience with org.eclipse.xtext.common.Terminals

generate selfCheckoutExperience "http://www.SelfCheckoutExperience.self_checkout_experience"

import "http://www.eclipse.org/emf/2002/Ecore" as ecore


Self_checkout:
	selfCheckoutExperience+=SelfCheckoutExperience*
;

SelfCheckoutExperience:
	SelfCheckoutOnline | SelfCheckoutInstore
;

/////////////////////////////////////////////////////////////////ONLINE SELF-CHECKOUT/////////////////////////////////////////////////////////////////////
SelfCheckoutOnline:
	loadShoppingSite=LoadShoppingSite
	search+=Search*
	onlineCheckout=OnlineCheckout?
;

enum LoadShoppingSite:
	load_shop_site
;

Search:
	"search" "for" itemSearch=ItemDef 
	addToOnlineBasket=AddToOnlineBasket?
;

AddToOnlineBasket:
//	"add" "to" "basket" itemCount = Addition item=[ItemDef]
	"add" "to" "basket" "(" itemCount = Addition ")" item=[ItemDef]

	removeFromOnlineBasket=RemoveFromOnlineBasket?
;

RemoveFromOnlineBasket:
	"remove" "from" "basket" removeItem=[ItemDef]
;

OnlineCheckout:
	"checkout" 
	deliveryOptions=DeliveryOptions
	confirm=Confirm
;

enum DeliveryOptions:
	premium_delivery | standard_delivery | next_day_delivery
;

Confirm:
	confirmEnum=ConfirmEnum
	pay=Pay
;

enum ConfirmEnum:
	confirm
;


////////////////////////////////////////////////////////////////IN-STORE SELF-CHECKOUT//////////////////////////////////////////////////////////////////////
SelfCheckoutInstore:
	pickScanMachine = HoldSelfScanner	
	statement+=(PickStatement|WalkStatement)*
	checkout = Checkout?
;

HoldSelfScanner:
	"hold" scanMachine = SelfScanner
;

enum SelfScanner:
	selfscanner
;	
	
PickStatement:
	"pick" "up" "(" itemCount = Addition ")"  itemPicked = ItemDef
	holdingItem = (ScanAndAddToBasket | Drop)
;

ItemDef:
	name = ID
;

ScanAndAddToBasket:
	"scan" "and" "add" "to" "basket" itemInBasket=[ItemDef]
;

Drop:
	"drop" itemDropped=[ItemDef]
;

WalkStatement:
	MoveStatement |
	TurnStatement |
	Repeat |
	VariableDeclaration
;


VariableDeclaration:
	"var" name=ID "=" value=INT
;

Repeat:
	"repeat" count = Addition "times:" 
	  statements += WalkStatement+
	"end"
;

MoveStatement:
	command = MoveCommand "(" steps = Addition ")"
;

enum MoveCommand:
	forward | backward
;

TurnStatement:
	"turn" command = TurnCommand
;

enum TurnCommand:
	left | right
;

Addition returns IntExpression:
	Multiplication ({Addition.left = current} operator+=("+"|"-") right+=Multiplication)*
;

Multiplication returns IntExpression:
	Primary ({Multiplication.left = current} operator+=("*"|"/") right+=Primary)*
;

Primary returns IntExpression:
	IntLiteral |
	IntVarExpression |
	"(" Addition ")"
;

IntLiteral:
	val = INTEGER
;

INTEGER returns ecore::EInt hidden():
	INT
;
//REAL returns ecore::EFloat hidden():
//	INT? "." INT
//; 


IntVarExpression:
	var = [VariableDeclaration]
;

Checkout:
	"go" "to" "self-checkout"
	scan = ScanExpression
	pay = Pay
;

ScanExpression:
	Scan ({ComplexScan.start = current} 'then' next += CarryItems)?
;

Scan:
	"scan" "barcode" "with" scanMachine = SelfScanner
;

CarryItems:
	carry = Carry  "all" "items"
;

enum Carry:
	bag | hold
;

enum Pay:
	pay
;
