/*
 * generated by Xtext 2.25.0
 */
grammar InternalSelfCheckoutExperience;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package self_checkout_experience.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package self_checkout_experience.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import self_checkout_experience.services.SelfCheckoutExperienceGrammarAccess;

}
@parser::members {
	private SelfCheckoutExperienceGrammarAccess grammarAccess;

	public void setGrammarAccess(SelfCheckoutExperienceGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSelf_checkout
entryRuleSelf_checkout
:
{ before(grammarAccess.getSelf_checkoutRule()); }
	 ruleSelf_checkout
{ after(grammarAccess.getSelf_checkoutRule()); } 
	 EOF 
;

// Rule Self_checkout
ruleSelf_checkout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getGroup()); }
		(rule__Self_checkout__Group__0)
		{ after(grammarAccess.getSelf_checkoutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleHoldSelfScanner
entryRuleHoldSelfScanner
:
{ before(grammarAccess.getHoldSelfScannerRule()); }
	 ruleHoldSelfScanner
{ after(grammarAccess.getHoldSelfScannerRule()); } 
	 EOF 
;

// Rule HoldSelfScanner
ruleHoldSelfScanner 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getHoldSelfScannerAccess().getGroup()); }
		(rule__HoldSelfScanner__Group__0)
		{ after(grammarAccess.getHoldSelfScannerAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePickStatement
entryRulePickStatement
:
{ before(grammarAccess.getPickStatementRule()); }
	 rulePickStatement
{ after(grammarAccess.getPickStatementRule()); } 
	 EOF 
;

// Rule PickStatement
rulePickStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPickStatementAccess().getGroup()); }
		(rule__PickStatement__Group__0)
		{ after(grammarAccess.getPickStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleItemDef
entryRuleItemDef
:
{ before(grammarAccess.getItemDefRule()); }
	 ruleItemDef
{ after(grammarAccess.getItemDefRule()); } 
	 EOF 
;

// Rule ItemDef
ruleItemDef 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getItemDefAccess().getNameAssignment()); }
		(rule__ItemDef__NameAssignment)
		{ after(grammarAccess.getItemDefAccess().getNameAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScanAndAddToBasket
entryRuleScanAndAddToBasket
:
{ before(grammarAccess.getScanAndAddToBasketRule()); }
	 ruleScanAndAddToBasket
{ after(grammarAccess.getScanAndAddToBasketRule()); } 
	 EOF 
;

// Rule ScanAndAddToBasket
ruleScanAndAddToBasket 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScanAndAddToBasketAccess().getGroup()); }
		(rule__ScanAndAddToBasket__Group__0)
		{ after(grammarAccess.getScanAndAddToBasketAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrop
entryRuleDrop
:
{ before(grammarAccess.getDropRule()); }
	 ruleDrop
{ after(grammarAccess.getDropRule()); } 
	 EOF 
;

// Rule Drop
ruleDrop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropAccess().getGroup()); }
		(rule__Drop__Group__0)
		{ after(grammarAccess.getDropAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWalkStatement
entryRuleWalkStatement
:
{ before(grammarAccess.getWalkStatementRule()); }
	 ruleWalkStatement
{ after(grammarAccess.getWalkStatementRule()); } 
	 EOF 
;

// Rule WalkStatement
ruleWalkStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWalkStatementAccess().getAlternatives()); }
		(rule__WalkStatement__Alternatives)
		{ after(grammarAccess.getWalkStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRepeat
entryRuleRepeat
:
{ before(grammarAccess.getRepeatRule()); }
	 ruleRepeat
{ after(grammarAccess.getRepeatRule()); } 
	 EOF 
;

// Rule Repeat
ruleRepeat 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRepeatAccess().getGroup()); }
		(rule__Repeat__Group__0)
		{ after(grammarAccess.getRepeatAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveStatement
entryRuleMoveStatement
:
{ before(grammarAccess.getMoveStatementRule()); }
	 ruleMoveStatement
{ after(grammarAccess.getMoveStatementRule()); } 
	 EOF 
;

// Rule MoveStatement
ruleMoveStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveStatementAccess().getGroup()); }
		(rule__MoveStatement__Group__0)
		{ after(grammarAccess.getMoveStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnStatement
entryRuleTurnStatement
:
{ before(grammarAccess.getTurnStatementRule()); }
	 ruleTurnStatement
{ after(grammarAccess.getTurnStatementRule()); } 
	 EOF 
;

// Rule TurnStatement
ruleTurnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnStatementAccess().getGroup()); }
		(rule__TurnStatement__Group__0)
		{ after(grammarAccess.getTurnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression
:
{ before(grammarAccess.getIntVarExpressionRule()); }
	 ruleIntVarExpression
{ after(grammarAccess.getIntVarExpressionRule()); } 
	 EOF 
;

// Rule IntVarExpression
ruleIntVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
		(rule__IntVarExpression__VarAssignment)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleCheckout
entryRuleCheckout
:
{ before(grammarAccess.getCheckoutRule()); }
	 ruleCheckout
{ after(grammarAccess.getCheckoutRule()); } 
	 EOF 
;

// Rule Checkout
ruleCheckout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckoutAccess().getGroup()); }
		(rule__Checkout__Group__0)
		{ after(grammarAccess.getCheckoutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScan
entryRuleScan
:
{ before(grammarAccess.getScanRule()); }
	 ruleScan
{ after(grammarAccess.getScanRule()); } 
	 EOF 
;

// Rule Scan
ruleScan 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScanAccess().getGroup()); }
		(rule__Scan__Group__0)
		{ after(grammarAccess.getScanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddToBag
entryRuleAddToBag
:
{ before(grammarAccess.getAddToBagRule()); }
	 ruleAddToBag
{ after(grammarAccess.getAddToBagRule()); } 
	 EOF 
;

// Rule AddToBag
ruleAddToBag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddToBagAccess().getGroup()); }
		(rule__AddToBag__Group__0)
		{ after(grammarAccess.getAddToBagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule SelfScanner
ruleSelfScanner
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelfScannerAccess().getSelfscannerEnumLiteralDeclaration()); }
		('selfscanner')
		{ after(grammarAccess.getSelfScannerAccess().getSelfscannerEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MoveCommand
ruleMoveCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveCommandAccess().getAlternatives()); }
		(rule__MoveCommand__Alternatives)
		{ after(grammarAccess.getMoveCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TurnCommand
ruleTurnCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnCommandAccess().getAlternatives()); }
		(rule__TurnCommand__Alternatives)
		{ after(grammarAccess.getTurnCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Bag
ruleBag
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getBagAccess().getBagEnumLiteralDeclaration()); }
		('bag')
		{ after(grammarAccess.getBagAccess().getBagEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Pay
rulePay
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayAccess().getPayEnumLiteralDeclaration()); }
		('pay')
		{ after(grammarAccess.getPayAccess().getPayEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Alternatives_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getPickstatementsAssignment_1_0()); }
		(rule__Self_checkout__PickstatementsAssignment_1_0)
		{ after(grammarAccess.getSelf_checkoutAccess().getPickstatementsAssignment_1_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getWalkstatementsAssignment_1_1()); }
		(rule__Self_checkout__WalkstatementsAssignment_1_1)
		{ after(grammarAccess.getSelf_checkoutAccess().getWalkstatementsAssignment_1_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__HoldingItemAlternatives_4_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickStatementAccess().getHoldingItemScanAndAddToBasketParserRuleCall_4_0_0()); }
		ruleScanAndAddToBasket
		{ after(grammarAccess.getPickStatementAccess().getHoldingItemScanAndAddToBasketParserRuleCall_4_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPickStatementAccess().getHoldingItemDropParserRuleCall_4_0_1()); }
		ruleDrop
		{ after(grammarAccess.getPickStatementAccess().getHoldingItemDropParserRuleCall_4_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WalkStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWalkStatementAccess().getMoveStatementParserRuleCall_0()); }
		ruleMoveStatement
		{ after(grammarAccess.getWalkStatementAccess().getMoveStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWalkStatementAccess().getTurnStatementParserRuleCall_1()); }
		ruleTurnStatement
		{ after(grammarAccess.getWalkStatementAccess().getTurnStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getWalkStatementAccess().getRepeatParserRuleCall_2()); }
		ruleRepeat
		{ after(grammarAccess.getWalkStatementAccess().getRepeatParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getWalkStatementAccess().getVariableDeclarationParserRuleCall_3()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getWalkStatementAccess().getVariableDeclarationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__StatementsAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getStatementsWalkStatementParserRuleCall_3_0_0()); }
		ruleWalkStatement
		{ after(grammarAccess.getRepeatAccess().getStatementsWalkStatementParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getRepeatAccess().getStatementsPickStatementParserRuleCall_3_0_1()); }
		rulePickStatement
		{ after(grammarAccess.getRepeatAccess().getStatementsPickStatementParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
		ruleIntVarExpression
		{ after(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_2()); }
		(rule__Primary__Group_2__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_2()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveCommandAccess().getForwardEnumLiteralDeclaration_0()); }
		('forward')
		{ after(grammarAccess.getMoveCommandAccess().getForwardEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMoveCommandAccess().getBackwardEnumLiteralDeclaration_1()); }
		('backward')
		{ after(grammarAccess.getMoveCommandAccess().getBackwardEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnCommandAccess().getLeftEnumLiteralDeclaration_0()); }
		('left')
		{ after(grammarAccess.getTurnCommandAccess().getLeftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTurnCommandAccess().getRightEnumLiteralDeclaration_1()); }
		('right')
		{ after(grammarAccess.getTurnCommandAccess().getRightEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Self_checkout__Group__0__Impl
	rule__Self_checkout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelf_checkoutAccess().getPickScanMachineAssignment_0()); }
	(rule__Self_checkout__PickScanMachineAssignment_0)
	{ after(grammarAccess.getSelf_checkoutAccess().getPickScanMachineAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Self_checkout__Group__1__Impl
	rule__Self_checkout__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelf_checkoutAccess().getAlternatives_1()); }
	(rule__Self_checkout__Alternatives_1)*
	{ after(grammarAccess.getSelf_checkoutAccess().getAlternatives_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Self_checkout__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelf_checkoutAccess().getCheckoutAssignment_2()); }
	(rule__Self_checkout__CheckoutAssignment_2)?
	{ after(grammarAccess.getSelf_checkoutAccess().getCheckoutAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__HoldSelfScanner__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HoldSelfScanner__Group__0__Impl
	rule__HoldSelfScanner__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldSelfScanner__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldSelfScannerAccess().getHoldKeyword_0()); }
	'hold'
	{ after(grammarAccess.getHoldSelfScannerAccess().getHoldKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldSelfScanner__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__HoldSelfScanner__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldSelfScanner__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getHoldSelfScannerAccess().getScanMachineAssignment_1()); }
	(rule__HoldSelfScanner__ScanMachineAssignment_1)
	{ after(grammarAccess.getHoldSelfScannerAccess().getScanMachineAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__PickStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickStatement__Group__0__Impl
	rule__PickStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickStatementAccess().getPickKeyword_0()); }
	'pick'
	{ after(grammarAccess.getPickStatementAccess().getPickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickStatement__Group__1__Impl
	rule__PickStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickStatementAccess().getUpKeyword_1()); }
	'up'
	{ after(grammarAccess.getPickStatementAccess().getUpKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickStatement__Group__2__Impl
	rule__PickStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickStatementAccess().getItemCountAssignment_2()); }
	(rule__PickStatement__ItemCountAssignment_2)
	{ after(grammarAccess.getPickStatementAccess().getItemCountAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickStatement__Group__3__Impl
	rule__PickStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickStatementAccess().getItemPickedAssignment_3()); }
	(rule__PickStatement__ItemPickedAssignment_3)
	{ after(grammarAccess.getPickStatementAccess().getItemPickedAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__PickStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickStatementAccess().getHoldingItemAssignment_4()); }
	(rule__PickStatement__HoldingItemAssignment_4)
	{ after(grammarAccess.getPickStatementAccess().getHoldingItemAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__ScanAndAddToBasket__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScanAndAddToBasket__Group__0__Impl
	rule__ScanAndAddToBasket__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAndAddToBasketAccess().getScanKeyword_0()); }
	'scan'
	{ after(grammarAccess.getScanAndAddToBasketAccess().getScanKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScanAndAddToBasket__Group__1__Impl
	rule__ScanAndAddToBasket__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAndAddToBasketAccess().getAndKeyword_1()); }
	'and'
	{ after(grammarAccess.getScanAndAddToBasketAccess().getAndKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScanAndAddToBasket__Group__2__Impl
	rule__ScanAndAddToBasket__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAndAddToBasketAccess().getAddKeyword_2()); }
	'add'
	{ after(grammarAccess.getScanAndAddToBasketAccess().getAddKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScanAndAddToBasket__Group__3__Impl
	rule__ScanAndAddToBasket__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAndAddToBasketAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getScanAndAddToBasketAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScanAndAddToBasket__Group__4__Impl
	rule__ScanAndAddToBasket__Group__5
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAndAddToBasketAccess().getBasketKeyword_4()); }
	'basket'
	{ after(grammarAccess.getScanAndAddToBasketAccess().getBasketKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__5
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__ScanAndAddToBasket__Group__5__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__Group__5__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAndAddToBasketAccess().getItemInBasketAssignment_5()); }
	(rule__ScanAndAddToBasket__ItemInBasketAssignment_5)
	{ after(grammarAccess.getScanAndAddToBasketAccess().getItemInBasketAssignment_5()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drop__Group__0__Impl
	rule__Drop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropAccess().getDropKeyword_0()); }
	'drop'
	{ after(grammarAccess.getDropAccess().getDropKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropAccess().getItemDroppedAssignment_1()); }
	(rule__Drop__ItemDroppedAssignment_1)
	{ after(grammarAccess.getDropAccess().getItemDroppedAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Repeat__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__0__Impl
	rule__Repeat__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getRepeatKeyword_0()); }
	'repeat'
	{ after(grammarAccess.getRepeatAccess().getRepeatKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__1__Impl
	rule__Repeat__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getCountAssignment_1()); }
	(rule__Repeat__CountAssignment_1)
	{ after(grammarAccess.getRepeatAccess().getCountAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__2__Impl
	rule__Repeat__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getTimesKeyword_2()); }
	'times:'
	{ after(grammarAccess.getRepeatAccess().getTimesKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__3__Impl
	rule__Repeat__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getRepeatAccess().getStatementsAssignment_3()); }
		(rule__Repeat__StatementsAssignment_3)
		{ after(grammarAccess.getRepeatAccess().getStatementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getRepeatAccess().getStatementsAssignment_3()); }
		(rule__Repeat__StatementsAssignment_3)*
		{ after(grammarAccess.getRepeatAccess().getStatementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Repeat__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getRepeatAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getRepeatAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__0__Impl
	rule__MoveStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getCommandAssignment_0()); }
	(rule__MoveStatement__CommandAssignment_0)
	{ after(grammarAccess.getMoveStatementAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__1__Impl
	rule__MoveStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMoveStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__2__Impl
	rule__MoveStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getStepsAssignment_2()); }
	(rule__MoveStatement__StepsAssignment_2)
	{ after(grammarAccess.getMoveStatementAccess().getStepsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getMoveStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__0__Impl
	rule__TurnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getTurnKeyword_0()); }
	'turn'
	{ after(grammarAccess.getTurnStatementAccess().getTurnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getCommandAssignment_1()); }
	(rule__TurnStatement__CommandAssignment_1)
	{ after(grammarAccess.getTurnStatementAccess().getCommandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_2__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__0__Impl
	rule__Primary__Group_2__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_2_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__1__Impl
	rule__Primary__Group_2__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_2_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_2__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_2__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_2_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Checkout__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__0__Impl
	rule__Checkout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getCheckoutAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__1__Impl
	rule__Checkout__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getCheckoutAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__2__Impl
	rule__Checkout__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getSelfCheckoutKeyword_2()); }
	'self-checkout'
	{ after(grammarAccess.getCheckoutAccess().getSelfCheckoutKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__3__Impl
	rule__Checkout__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getScanAssignment_3()); }
	(rule__Checkout__ScanAssignment_3)
	{ after(grammarAccess.getCheckoutAccess().getScanAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getPayAssignment_4()); }
	(rule__Checkout__PayAssignment_4)
	{ after(grammarAccess.getCheckoutAccess().getPayAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scan__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__0__Impl
	rule__Scan__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getScanKeyword_0()); }
	'scan'
	{ after(grammarAccess.getScanAccess().getScanKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__1__Impl
	rule__Scan__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getBarcodeKeyword_1()); }
	'barcode'
	{ after(grammarAccess.getScanAccess().getBarcodeKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__2__Impl
	rule__Scan__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getWithKeyword_2()); }
	'with'
	{ after(grammarAccess.getScanAccess().getWithKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__3__Impl
	rule__Scan__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getScanMachineAssignment_3()); }
	(rule__Scan__ScanMachineAssignment_3)
	{ after(grammarAccess.getScanAccess().getScanMachineAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getAddToBagAssignment_4()); }
	(rule__Scan__AddToBagAssignment_4)?
	{ after(grammarAccess.getScanAccess().getAddToBagAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddToBag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__0__Impl
	rule__AddToBag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAddToBagAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__1__Impl
	rule__AddToBag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getAllKeyword_1()); }
	'all'
	{ after(grammarAccess.getAddToBagAccess().getAllKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__2__Impl
	rule__AddToBag__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getItemsKeyword_2()); }
	'items'
	{ after(grammarAccess.getAddToBagAccess().getItemsKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__3__Impl
	rule__AddToBag__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getToKeyword_3()); }
	'to'
	{ after(grammarAccess.getAddToBagAccess().getToKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getBagAssignment_4()); }
	(rule__AddToBag__BagAssignment_4)
	{ after(grammarAccess.getAddToBagAccess().getBagAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Self_checkout__PickScanMachineAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getPickScanMachineHoldSelfScannerParserRuleCall_0_0()); }
		ruleHoldSelfScanner
		{ after(grammarAccess.getSelf_checkoutAccess().getPickScanMachineHoldSelfScannerParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__PickstatementsAssignment_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getPickstatementsPickStatementParserRuleCall_1_0_0()); }
		rulePickStatement
		{ after(grammarAccess.getSelf_checkoutAccess().getPickstatementsPickStatementParserRuleCall_1_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__WalkstatementsAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getWalkstatementsWalkStatementParserRuleCall_1_1_0()); }
		ruleWalkStatement
		{ after(grammarAccess.getSelf_checkoutAccess().getWalkstatementsWalkStatementParserRuleCall_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__CheckoutAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getCheckoutCheckoutParserRuleCall_2_0()); }
		ruleCheckout
		{ after(grammarAccess.getSelf_checkoutAccess().getCheckoutCheckoutParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__HoldSelfScanner__ScanMachineAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getHoldSelfScannerAccess().getScanMachineSelfScannerEnumRuleCall_1_0()); }
		ruleSelfScanner
		{ after(grammarAccess.getHoldSelfScannerAccess().getScanMachineSelfScannerEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__ItemCountAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickStatementAccess().getItemCountAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getPickStatementAccess().getItemCountAdditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__ItemPickedAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickStatementAccess().getItemPickedItemDefParserRuleCall_3_0()); }
		ruleItemDef
		{ after(grammarAccess.getPickStatementAccess().getItemPickedItemDefParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__PickStatement__HoldingItemAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickStatementAccess().getHoldingItemAlternatives_4_0()); }
		(rule__PickStatement__HoldingItemAlternatives_4_0)
		{ after(grammarAccess.getPickStatementAccess().getHoldingItemAlternatives_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ItemDef__NameAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getItemDefAccess().getNameIDTerminalRuleCall_0()); }
		RULE_ID
		{ after(grammarAccess.getItemDefAccess().getNameIDTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__ScanAndAddToBasket__ItemInBasketAssignment_5
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScanAndAddToBasketAccess().getItemInBasketItemDefCrossReference_5_0()); }
		(
			{ before(grammarAccess.getScanAndAddToBasketAccess().getItemInBasketItemDefIDTerminalRuleCall_5_0_1()); }
			RULE_ID
			{ after(grammarAccess.getScanAndAddToBasketAccess().getItemInBasketItemDefIDTerminalRuleCall_5_0_1()); }
		)
		{ after(grammarAccess.getScanAndAddToBasketAccess().getItemInBasketItemDefCrossReference_5_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__ItemDroppedAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropAccess().getItemDroppedItemDefCrossReference_1_0()); }
		(
			{ before(grammarAccess.getDropAccess().getItemDroppedItemDefIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDropAccess().getItemDroppedItemDefIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getDropAccess().getItemDroppedItemDefCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__CountAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getCountAdditionParserRuleCall_1_0()); }
		ruleAddition
		{ after(grammarAccess.getRepeatAccess().getCountAdditionParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Repeat__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRepeatAccess().getStatementsAlternatives_3_0()); }
		(rule__Repeat__StatementsAlternatives_3_0)
		{ after(grammarAccess.getRepeatAccess().getStatementsAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStatementAccess().getCommandMoveCommandEnumRuleCall_0_0()); }
		ruleMoveCommand
		{ after(grammarAccess.getMoveStatementAccess().getCommandMoveCommandEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__StepsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStatementAccess().getStepsAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getMoveStatementAccess().getStepsAdditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__CommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnStatementAccess().getCommandTurnCommandEnumRuleCall_1_0()); }
		ruleTurnCommand
		{ after(grammarAccess.getTurnStatementAccess().getCommandTurnCommandEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__ScanAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckoutAccess().getScanScanParserRuleCall_3_0()); }
		ruleScan
		{ after(grammarAccess.getCheckoutAccess().getScanScanParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__PayAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckoutAccess().getPayPayEnumRuleCall_4_0()); }
		rulePay
		{ after(grammarAccess.getCheckoutAccess().getPayPayEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__ScanMachineAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScanAccess().getScanMachineSelfScannerEnumRuleCall_3_0()); }
		ruleSelfScanner
		{ after(grammarAccess.getScanAccess().getScanMachineSelfScannerEnumRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__AddToBagAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScanAccess().getAddToBagAddToBagParserRuleCall_4_0()); }
		ruleAddToBag
		{ after(grammarAccess.getScanAccess().getAddToBagAddToBagParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__BagAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddToBagAccess().getBagBagEnumRuleCall_4_0()); }
		ruleBag
		{ after(grammarAccess.getAddToBagAccess().getBagBagEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
