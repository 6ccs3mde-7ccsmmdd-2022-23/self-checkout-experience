/*
 * generated by Xtext 2.25.0
 */
grammar InternalSelfCheckout;

options {
	superClass=AbstractInternalContentAssistParser;
}

@lexer::header {
package self_checkout_experience.ide.contentassist.antlr.internal;

// Hack: Use our own Lexer superclass by means of import. 
// Currently there is no other way to specify the superclass for the lexer.
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.Lexer;
}

@parser::header {
package self_checkout_experience.ide.contentassist.antlr.internal;

import java.io.InputStream;
import org.eclipse.xtext.*;
import org.eclipse.xtext.parser.*;
import org.eclipse.xtext.parser.impl.*;
import org.eclipse.emf.ecore.util.EcoreUtil;
import org.eclipse.emf.ecore.EObject;
import org.eclipse.xtext.parser.antlr.XtextTokenStream;
import org.eclipse.xtext.parser.antlr.XtextTokenStream.HiddenTokens;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.AbstractInternalContentAssistParser;
import org.eclipse.xtext.ide.editor.contentassist.antlr.internal.DFA;
import self_checkout_experience.services.SelfCheckoutGrammarAccess;

}
@parser::members {
	private SelfCheckoutGrammarAccess grammarAccess;

	public void setGrammarAccess(SelfCheckoutGrammarAccess grammarAccess) {
		this.grammarAccess = grammarAccess;
	}

	@Override
	protected Grammar getGrammar() {
		return grammarAccess.getGrammar();
	}

	@Override
	protected String getValueForTokenName(String tokenName) {
		return tokenName;
	}
}

// Entry rule entryRuleSelf_checkout
entryRuleSelf_checkout
:
{ before(grammarAccess.getSelf_checkoutRule()); }
	 ruleSelf_checkout
{ after(grammarAccess.getSelf_checkoutRule()); } 
	 EOF 
;

// Rule Self_checkout
ruleSelf_checkout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getGroup()); }
		(rule__Self_checkout__Group__0)
		{ after(grammarAccess.getSelf_checkoutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleChoose
entryRuleChoose
:
{ before(grammarAccess.getChooseRule()); }
	 ruleChoose
{ after(grammarAccess.getChooseRule()); } 
	 EOF 
;

// Rule Choose
ruleChoose 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getChooseAccess().getPickAssignment()); }
		(rule__Choose__PickAssignment)
		{ after(grammarAccess.getChooseAccess().getPickAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePick
entryRulePick
:
{ before(grammarAccess.getPickRule()); }
	 rulePick
{ after(grammarAccess.getPickRule()); } 
	 EOF 
;

// Rule Pick
rulePick 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPickAccess().getGroup()); }
		(rule__Pick__Group__0)
		{ after(grammarAccess.getPickAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddToBasket
entryRuleAddToBasket
:
{ before(grammarAccess.getAddToBasketRule()); }
	 ruleAddToBasket
{ after(grammarAccess.getAddToBasketRule()); } 
	 EOF 
;

// Rule AddToBasket
ruleAddToBasket 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddToBasketAccess().getGroup()); }
		(rule__AddToBasket__Group__0)
		{ after(grammarAccess.getAddToBasketAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleDrop
entryRuleDrop
:
{ before(grammarAccess.getDropRule()); }
	 ruleDrop
{ after(grammarAccess.getDropRule()); } 
	 EOF 
;

// Rule Drop
ruleDrop 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getDropAccess().getGroup()); }
		(rule__Drop__Group__0)
		{ after(grammarAccess.getDropAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleWalkStatement
entryRuleWalkStatement
:
{ before(grammarAccess.getWalkStatementRule()); }
	 ruleWalkStatement
{ after(grammarAccess.getWalkStatementRule()); } 
	 EOF 
;

// Rule WalkStatement
ruleWalkStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getWalkStatementAccess().getAlternatives()); }
		(rule__WalkStatement__Alternatives)
		{ after(grammarAccess.getWalkStatementAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleVariableDeclaration
entryRuleVariableDeclaration
:
{ before(grammarAccess.getVariableDeclarationRule()); }
	 ruleVariableDeclaration
{ after(grammarAccess.getVariableDeclarationRule()); } 
	 EOF 
;

// Rule VariableDeclaration
ruleVariableDeclaration 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getGroup()); }
		(rule__VariableDeclaration__Group__0)
		{ after(grammarAccess.getVariableDeclarationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleLoopStatement
entryRuleLoopStatement
:
{ before(grammarAccess.getLoopStatementRule()); }
	 ruleLoopStatement
{ after(grammarAccess.getLoopStatementRule()); } 
	 EOF 
;

// Rule LoopStatement
ruleLoopStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getLoopStatementAccess().getGroup()); }
		(rule__LoopStatement__Group__0)
		{ after(grammarAccess.getLoopStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMoveStatement
entryRuleMoveStatement
:
{ before(grammarAccess.getMoveStatementRule()); }
	 ruleMoveStatement
{ after(grammarAccess.getMoveStatementRule()); } 
	 EOF 
;

// Rule MoveStatement
ruleMoveStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMoveStatementAccess().getGroup()); }
		(rule__MoveStatement__Group__0)
		{ after(grammarAccess.getMoveStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleTurnStatement
entryRuleTurnStatement
:
{ before(grammarAccess.getTurnStatementRule()); }
	 ruleTurnStatement
{ after(grammarAccess.getTurnStatementRule()); } 
	 EOF 
;

// Rule TurnStatement
ruleTurnStatement 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getTurnStatementAccess().getGroup()); }
		(rule__TurnStatement__Group__0)
		{ after(grammarAccess.getTurnStatementAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddition
entryRuleAddition
:
{ before(grammarAccess.getAdditionRule()); }
	 ruleAddition
{ after(grammarAccess.getAdditionRule()); } 
	 EOF 
;

// Rule Addition
ruleAddition 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAdditionAccess().getGroup()); }
		(rule__Addition__Group__0)
		{ after(grammarAccess.getAdditionAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleMultiplication
entryRuleMultiplication
:
{ before(grammarAccess.getMultiplicationRule()); }
	 ruleMultiplication
{ after(grammarAccess.getMultiplicationRule()); } 
	 EOF 
;

// Rule Multiplication
ruleMultiplication 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getMultiplicationAccess().getGroup()); }
		(rule__Multiplication__Group__0)
		{ after(grammarAccess.getMultiplicationAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRulePrimary
entryRulePrimary
:
{ before(grammarAccess.getPrimaryRule()); }
	 rulePrimary
{ after(grammarAccess.getPrimaryRule()); } 
	 EOF 
;

// Rule Primary
rulePrimary 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getPrimaryAccess().getAlternatives()); }
		(rule__Primary__Alternatives)
		{ after(grammarAccess.getPrimaryAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntLiteral
entryRuleIntLiteral
:
{ before(grammarAccess.getIntLiteralRule()); }
	 ruleIntLiteral
{ after(grammarAccess.getIntLiteralRule()); } 
	 EOF 
;

// Rule IntLiteral
ruleIntLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValAssignment()); }
		(rule__IntLiteral__ValAssignment)
		{ after(grammarAccess.getIntLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleRealLiteral
entryRuleRealLiteral
:
{ before(grammarAccess.getRealLiteralRule()); }
	 ruleRealLiteral
{ after(grammarAccess.getRealLiteralRule()); } 
	 EOF 
;

// Rule RealLiteral
ruleRealLiteral 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValAssignment()); }
		(rule__RealLiteral__ValAssignment)
		{ after(grammarAccess.getRealLiteralAccess().getValAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleIntVarExpression
entryRuleIntVarExpression
:
{ before(grammarAccess.getIntVarExpressionRule()); }
	 ruleIntVarExpression
{ after(grammarAccess.getIntVarExpressionRule()); } 
	 EOF 
;

// Rule IntVarExpression
ruleIntVarExpression 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
		(rule__IntVarExpression__VarAssignment)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarAssignment()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleREAL
entryRuleREAL
@init { 
	HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
}
:
{ before(grammarAccess.getREALRule()); }
	 ruleREAL
{ after(grammarAccess.getREALRule()); } 
	 EOF 
;
finally {
	myHiddenTokenState.restore();
}

// Rule REAL
ruleREAL 
	@init {
		HiddenTokens myHiddenTokenState = ((XtextTokenStream)input).setHiddenTokens();
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getREALAccess().getGroup()); }
		(rule__REAL__Group__0)
		{ after(grammarAccess.getREALAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
	myHiddenTokenState.restore();
}

// Entry rule entryRuleCheckout
entryRuleCheckout
:
{ before(grammarAccess.getCheckoutRule()); }
	 ruleCheckout
{ after(grammarAccess.getCheckoutRule()); } 
	 EOF 
;

// Rule Checkout
ruleCheckout 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getCheckoutAccess().getGroup()); }
		(rule__Checkout__Group__0)
		{ after(grammarAccess.getCheckoutAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleScan
entryRuleScan
:
{ before(grammarAccess.getScanRule()); }
	 ruleScan
{ after(grammarAccess.getScanRule()); } 
	 EOF 
;

// Rule Scan
ruleScan 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getScanAccess().getGroup()); }
		(rule__Scan__Group__0)
		{ after(grammarAccess.getScanAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Entry rule entryRuleAddToBag
entryRuleAddToBag
:
{ before(grammarAccess.getAddToBagRule()); }
	 ruleAddToBag
{ after(grammarAccess.getAddToBagRule()); } 
	 EOF 
;

// Rule AddToBag
ruleAddToBag 
	@init {
		int stackSize = keepStackSize();
	}
	:
	(
		{ before(grammarAccess.getAddToBagAccess().getGroup()); }
		(rule__AddToBag__Group__0)
		{ after(grammarAccess.getAddToBagAccess().getGroup()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule MoveCommand
ruleMoveCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveCommandAccess().getAlternatives()); }
		(rule__MoveCommand__Alternatives)
		{ after(grammarAccess.getMoveCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule TurnCommand
ruleTurnCommand
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnCommandAccess().getAlternatives()); }
		(rule__TurnCommand__Alternatives)
		{ after(grammarAccess.getTurnCommandAccess().getAlternatives()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

// Rule Pay
rulePay
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPayAccess().getPayEnumLiteralDeclaration()); }
		('pay')
		{ after(grammarAccess.getPayAccess().getPayEnumLiteralDeclaration()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Alternatives_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getPickAssignment_0_0()); }
		(rule__Self_checkout__PickAssignment_0_0)
		{ after(grammarAccess.getSelf_checkoutAccess().getPickAssignment_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getWalkstatementsAssignment_0_1()); }
		(rule__Self_checkout__WalkstatementsAssignment_0_1)
		{ after(grammarAccess.getSelf_checkoutAccess().getWalkstatementsAssignment_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__HoldingItemAlternatives_3_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickAccess().getHoldingItemAddToBasketParserRuleCall_3_0_0()); }
		ruleAddToBasket
		{ after(grammarAccess.getPickAccess().getHoldingItemAddToBasketParserRuleCall_3_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getPickAccess().getHoldingItemDropParserRuleCall_3_0_1()); }
		ruleDrop
		{ after(grammarAccess.getPickAccess().getHoldingItemDropParserRuleCall_3_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__WalkStatement__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getWalkStatementAccess().getMoveStatementParserRuleCall_0()); }
		ruleMoveStatement
		{ after(grammarAccess.getWalkStatementAccess().getMoveStatementParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getWalkStatementAccess().getTurnStatementParserRuleCall_1()); }
		ruleTurnStatement
		{ after(grammarAccess.getWalkStatementAccess().getTurnStatementParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getWalkStatementAccess().getLoopStatementParserRuleCall_2()); }
		ruleLoopStatement
		{ after(grammarAccess.getWalkStatementAccess().getLoopStatementParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getWalkStatementAccess().getVariableDeclarationParserRuleCall_3()); }
		ruleVariableDeclaration
		{ after(grammarAccess.getWalkStatementAccess().getVariableDeclarationParserRuleCall_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
		'+'
		{ after(grammarAccess.getAdditionAccess().getOperatorPlusSignKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
		'-'
		{ after(grammarAccess.getAdditionAccess().getOperatorHyphenMinusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAlternatives_1_1_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
		'*'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAsteriskKeyword_1_1_0_0()); }
	)
	|
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
		'/'
		{ after(grammarAccess.getMultiplicationAccess().getOperatorSolidusKeyword_1_1_0_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
		ruleIntLiteral
		{ after(grammarAccess.getPrimaryAccess().getIntLiteralParserRuleCall_0()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
		ruleIntVarExpression
		{ after(grammarAccess.getPrimaryAccess().getIntVarExpressionParserRuleCall_1()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2()); }
		ruleRealLiteral
		{ after(grammarAccess.getPrimaryAccess().getRealLiteralParserRuleCall_2()); }
	)
	|
	(
		{ before(grammarAccess.getPrimaryAccess().getGroup_3()); }
		(rule__Primary__Group_3__0)
		{ after(grammarAccess.getPrimaryAccess().getGroup_3()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveCommandAccess().getForwardEnumLiteralDeclaration_0()); }
		('forward')
		{ after(grammarAccess.getMoveCommandAccess().getForwardEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getMoveCommandAccess().getBackwardEnumLiteralDeclaration_1()); }
		('backward')
		{ after(grammarAccess.getMoveCommandAccess().getBackwardEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnCommand__Alternatives
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnCommandAccess().getLeftEnumLiteralDeclaration_0()); }
		('left')
		{ after(grammarAccess.getTurnCommandAccess().getLeftEnumLiteralDeclaration_0()); }
	)
	|
	(
		{ before(grammarAccess.getTurnCommandAccess().getRightEnumLiteralDeclaration_1()); }
		('right')
		{ after(grammarAccess.getTurnCommandAccess().getRightEnumLiteralDeclaration_1()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Self_checkout__Group__0__Impl
	rule__Self_checkout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelf_checkoutAccess().getAlternatives_0()); }
	(rule__Self_checkout__Alternatives_0)*
	{ after(grammarAccess.getSelf_checkoutAccess().getAlternatives_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Self_checkout__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getSelf_checkoutAccess().getCheckoutAssignment_1()); }
	(rule__Self_checkout__CheckoutAssignment_1)?
	{ after(grammarAccess.getSelf_checkoutAccess().getCheckoutAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Pick__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pick__Group__0__Impl
	rule__Pick__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickAccess().getPickKeyword_0()); }
	'pick'
	{ after(grammarAccess.getPickAccess().getPickKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pick__Group__1__Impl
	rule__Pick__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickAccess().getUpKeyword_1()); }
	'up'
	{ after(grammarAccess.getPickAccess().getUpKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pick__Group__2__Impl
	rule__Pick__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickAccess().getNameAssignment_2()); }
	(rule__Pick__NameAssignment_2)
	{ after(grammarAccess.getPickAccess().getNameAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Pick__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPickAccess().getHoldingItemAssignment_3()); }
	(rule__Pick__HoldingItemAssignment_3)
	{ after(grammarAccess.getPickAccess().getHoldingItemAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddToBasket__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBasket__Group__0__Impl
	rule__AddToBasket__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBasketAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAddToBasketAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBasket__Group__1__Impl
	rule__AddToBasket__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBasketAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getAddToBasketAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBasket__Group__2__Impl
	rule__AddToBasket__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBasketAccess().getBasketKeyword_2()); }
	'basket'
	{ after(grammarAccess.getAddToBasketAccess().getBasketKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBasket__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBasketAccess().getItemAssignment_3()); }
	(rule__AddToBasket__ItemAssignment_3)
	{ after(grammarAccess.getAddToBasketAccess().getItemAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Drop__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drop__Group__0__Impl
	rule__Drop__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropAccess().getDropKeyword_0()); }
	'drop'
	{ after(grammarAccess.getDropAccess().getDropKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Drop__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getDropAccess().getItemAssignment_1()); }
	(rule__Drop__ItemAssignment_1)
	{ after(grammarAccess.getDropAccess().getItemAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__VariableDeclaration__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__0__Impl
	rule__VariableDeclaration__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
	'var'
	{ after(grammarAccess.getVariableDeclarationAccess().getVarKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__1__Impl
	rule__VariableDeclaration__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
	(rule__VariableDeclaration__NameAssignment_1)
	{ after(grammarAccess.getVariableDeclarationAccess().getNameAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__2__Impl
	rule__VariableDeclaration__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
	'='
	{ after(grammarAccess.getVariableDeclarationAccess().getEqualsSignKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__VariableDeclaration__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
	(rule__VariableDeclaration__ValueAssignment_3)
	{ after(grammarAccess.getVariableDeclarationAccess().getValueAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__LoopStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__0__Impl
	rule__LoopStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getCountAssignment_0()); }
	(rule__LoopStatement__CountAssignment_0)
	{ after(grammarAccess.getLoopStatementAccess().getCountAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__1__Impl
	rule__LoopStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getTimesKeyword_1()); }
	'times'
	{ after(grammarAccess.getLoopStatementAccess().getTimesKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__2__Impl
	rule__LoopStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getDoKeyword_2()); }
	'do'
	{ after(grammarAccess.getLoopStatementAccess().getDoKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__3__Impl
	rule__LoopStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
		(rule__LoopStatement__StatementsAssignment_3)
		{ after(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
	)
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
		(rule__LoopStatement__StatementsAssignment_3)*
		{ after(grammarAccess.getLoopStatementAccess().getStatementsAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__LoopStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getLoopStatementAccess().getEndKeyword_4()); }
	'end'
	{ after(grammarAccess.getLoopStatementAccess().getEndKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__MoveStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__0__Impl
	rule__MoveStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getCommandAssignment_0()); }
	(rule__MoveStatement__CommandAssignment_0)
	{ after(grammarAccess.getMoveStatementAccess().getCommandAssignment_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__1__Impl
	rule__MoveStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getLeftParenthesisKeyword_1()); }
	'('
	{ after(grammarAccess.getMoveStatementAccess().getLeftParenthesisKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__2__Impl
	rule__MoveStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getStepsAssignment_2()); }
	(rule__MoveStatement__StepsAssignment_2)
	{ after(grammarAccess.getMoveStatementAccess().getStepsAssignment_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__MoveStatement__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMoveStatementAccess().getRightParenthesisKeyword_3()); }
	')'
	{ after(grammarAccess.getMoveStatementAccess().getRightParenthesisKeyword_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__TurnStatement__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__0__Impl
	rule__TurnStatement__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getTurnKeyword_0()); }
	'turn'
	{ after(grammarAccess.getTurnStatementAccess().getTurnKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__1__Impl
	rule__TurnStatement__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getCommandAssignment_1()); }
	(rule__TurnStatement__CommandAssignment_1)
	{ after(grammarAccess.getTurnStatementAccess().getCommandAssignment_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__2__Impl
	rule__TurnStatement__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getByKeyword_2()); }
	'by'
	{ after(grammarAccess.getTurnStatementAccess().getByKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__3__Impl
	rule__TurnStatement__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getDegreesAssignment_3()); }
	(rule__TurnStatement__DegreesAssignment_3)
	{ after(grammarAccess.getTurnStatementAccess().getDegreesAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__TurnStatement__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getTurnStatementAccess().getDegreesKeyword_4()); }
	'degrees'
	{ after(grammarAccess.getTurnStatementAccess().getDegreesKeyword_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__0__Impl
	rule__Addition__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
	ruleMultiplication
	{ after(grammarAccess.getAdditionAccess().getMultiplicationParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getGroup_1()); }
	(rule__Addition__Group_1__0)*
	{ after(grammarAccess.getAdditionAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Addition__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__0__Impl
	rule__Addition__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
	()
	{ after(grammarAccess.getAdditionAccess().getAdditionLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__1__Impl
	rule__Addition__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
	(rule__Addition__OperatorAssignment_1_1)
	{ after(grammarAccess.getAdditionAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Addition__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
	(rule__Addition__RightAssignment_1_2)
	{ after(grammarAccess.getAdditionAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__0__Impl
	rule__Multiplication__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
	rulePrimary
	{ after(grammarAccess.getMultiplicationAccess().getPrimaryParserRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group__1__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getGroup_1()); }
	(rule__Multiplication__Group_1__0)*
	{ after(grammarAccess.getMultiplicationAccess().getGroup_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Multiplication__Group_1__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__0__Impl
	rule__Multiplication__Group_1__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
	()
	{ after(grammarAccess.getMultiplicationAccess().getMultiplicationLeftAction_1_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__1__Impl
	rule__Multiplication__Group_1__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
	(rule__Multiplication__OperatorAssignment_1_1)
	{ after(grammarAccess.getMultiplicationAccess().getOperatorAssignment_1_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Multiplication__Group_1__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__Group_1__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
	(rule__Multiplication__RightAssignment_1_2)
	{ after(grammarAccess.getMultiplicationAccess().getRightAssignment_1_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Primary__Group_3__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__0__Impl
	rule__Primary__Group_3__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
	'('
	{ after(grammarAccess.getPrimaryAccess().getLeftParenthesisKeyword_3_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__1__Impl
	rule__Primary__Group_3__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1()); }
	ruleAddition
	{ after(grammarAccess.getPrimaryAccess().getAdditionParserRuleCall_3_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Primary__Group_3__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Primary__Group_3__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
	')'
	{ after(grammarAccess.getPrimaryAccess().getRightParenthesisKeyword_3_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__REAL__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__0__Impl
	rule__REAL__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
	(RULE_INT)?
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__1__Impl
	rule__REAL__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
	'.'
	{ after(grammarAccess.getREALAccess().getFullStopKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__REAL__Group__2__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__REAL__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
	RULE_INT
	{ after(grammarAccess.getREALAccess().getINTTerminalRuleCall_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Checkout__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__0__Impl
	rule__Checkout__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getGoKeyword_0()); }
	'go'
	{ after(grammarAccess.getCheckoutAccess().getGoKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__1__Impl
	rule__Checkout__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getCheckoutAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__2__Impl
	rule__Checkout__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getTillKeyword_2()); }
	'till'
	{ after(grammarAccess.getCheckoutAccess().getTillKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__3__Impl
	rule__Checkout__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	(
		{ before(grammarAccess.getCheckoutAccess().getScanAssignment_3()); }
		(rule__Checkout__ScanAssignment_3)
		{ after(grammarAccess.getCheckoutAccess().getScanAssignment_3()); }
	)
	(
		{ before(grammarAccess.getCheckoutAccess().getScanAssignment_3()); }
		(rule__Checkout__ScanAssignment_3)*
		{ after(grammarAccess.getCheckoutAccess().getScanAssignment_3()); }
	)
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Checkout__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getCheckoutAccess().getPayAssignment_4()); }
	(rule__Checkout__PayAssignment_4)
	{ after(grammarAccess.getCheckoutAccess().getPayAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Scan__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__0__Impl
	rule__Scan__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getScanKeyword_0()); }
	'scan'
	{ after(grammarAccess.getScanAccess().getScanKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__1__Impl
	rule__Scan__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getAtKeyword_1()); }
	'at'
	{ after(grammarAccess.getScanAccess().getAtKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__2__Impl
	rule__Scan__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getTillKeyword_2()); }
	'till'
	{ after(grammarAccess.getScanAccess().getTillKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__3__Impl
	rule__Scan__Group__4
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getNameAssignment_3()); }
	(rule__Scan__NameAssignment_3)
	{ after(grammarAccess.getScanAccess().getNameAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__4
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__Scan__Group__4__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__Group__4__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getScanAccess().getAddToBagAssignment_4()); }
	(rule__Scan__AddToBagAssignment_4)*
	{ after(grammarAccess.getScanAccess().getAddToBagAssignment_4()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__AddToBag__Group__0
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__0__Impl
	rule__AddToBag__Group__1
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__0__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getAddKeyword_0()); }
	'add'
	{ after(grammarAccess.getAddToBagAccess().getAddKeyword_0()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__1
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__1__Impl
	rule__AddToBag__Group__2
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__1__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getToKeyword_1()); }
	'to'
	{ after(grammarAccess.getAddToBagAccess().getToKeyword_1()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__2
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__2__Impl
	rule__AddToBag__Group__3
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__2__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getBagKeyword_2()); }
	'bag'
	{ after(grammarAccess.getAddToBagAccess().getBagKeyword_2()); }
)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__3
	@init {
		int stackSize = keepStackSize();
	}
:
	rule__AddToBag__Group__3__Impl
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__Group__3__Impl
	@init {
		int stackSize = keepStackSize();
	}
:
(
	{ before(grammarAccess.getAddToBagAccess().getBagItemAssignment_3()); }
	(rule__AddToBag__BagItemAssignment_3)
	{ after(grammarAccess.getAddToBagAccess().getBagItemAssignment_3()); }
)
;
finally {
	restoreStackSize(stackSize);
}


rule__Self_checkout__PickAssignment_0_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getPickPickParserRuleCall_0_0_0()); }
		rulePick
		{ after(grammarAccess.getSelf_checkoutAccess().getPickPickParserRuleCall_0_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__WalkstatementsAssignment_0_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getWalkstatementsWalkStatementParserRuleCall_0_1_0()); }
		ruleWalkStatement
		{ after(grammarAccess.getSelf_checkoutAccess().getWalkstatementsWalkStatementParserRuleCall_0_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Self_checkout__CheckoutAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getSelf_checkoutAccess().getCheckoutCheckoutParserRuleCall_1_0()); }
		ruleCheckout
		{ after(grammarAccess.getSelf_checkoutAccess().getCheckoutCheckoutParserRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Choose__PickAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getChooseAccess().getPickPickParserRuleCall_0()); }
		rulePick
		{ after(grammarAccess.getChooseAccess().getPickPickParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__NameAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickAccess().getNameIDTerminalRuleCall_2_0()); }
		RULE_ID
		{ after(grammarAccess.getPickAccess().getNameIDTerminalRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Pick__HoldingItemAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getPickAccess().getHoldingItemAlternatives_3_0()); }
		(rule__Pick__HoldingItemAlternatives_3_0)
		{ after(grammarAccess.getPickAccess().getHoldingItemAlternatives_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBasket__ItemAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddToBasketAccess().getItemPickCrossReference_3_0()); }
		(
			{ before(grammarAccess.getAddToBasketAccess().getItemPickIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAddToBasketAccess().getItemPickIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getAddToBasketAccess().getItemPickCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Drop__ItemAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getDropAccess().getItemPickCrossReference_1_0()); }
		(
			{ before(grammarAccess.getDropAccess().getItemPickIDTerminalRuleCall_1_0_1()); }
			RULE_ID
			{ after(grammarAccess.getDropAccess().getItemPickIDTerminalRuleCall_1_0_1()); }
		)
		{ after(grammarAccess.getDropAccess().getItemPickCrossReference_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__NameAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
		RULE_ID
		{ after(grammarAccess.getVariableDeclarationAccess().getNameIDTerminalRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__VariableDeclaration__ValueAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
		RULE_INT
		{ after(grammarAccess.getVariableDeclarationAccess().getValueINTTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__CountAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getCountAdditionParserRuleCall_0_0()); }
		ruleAddition
		{ after(grammarAccess.getLoopStatementAccess().getCountAdditionParserRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__LoopStatement__StatementsAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getLoopStatementAccess().getStatementsWalkStatementParserRuleCall_3_0()); }
		ruleWalkStatement
		{ after(grammarAccess.getLoopStatementAccess().getStatementsWalkStatementParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__CommandAssignment_0
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStatementAccess().getCommandMoveCommandEnumRuleCall_0_0()); }
		ruleMoveCommand
		{ after(grammarAccess.getMoveStatementAccess().getCommandMoveCommandEnumRuleCall_0_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__MoveStatement__StepsAssignment_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMoveStatementAccess().getStepsAdditionParserRuleCall_2_0()); }
		ruleAddition
		{ after(grammarAccess.getMoveStatementAccess().getStepsAdditionParserRuleCall_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__CommandAssignment_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnStatementAccess().getCommandTurnCommandEnumRuleCall_1_0()); }
		ruleTurnCommand
		{ after(grammarAccess.getTurnStatementAccess().getCommandTurnCommandEnumRuleCall_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__TurnStatement__DegreesAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getTurnStatementAccess().getDegreesAdditionParserRuleCall_3_0()); }
		ruleAddition
		{ after(grammarAccess.getTurnStatementAccess().getDegreesAdditionParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Addition__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getAdditionAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Addition__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
		ruleMultiplication
		{ after(grammarAccess.getAdditionAccess().getRightMultiplicationParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__OperatorAssignment_1_1
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
		(rule__Multiplication__OperatorAlternatives_1_1_0)
		{ after(grammarAccess.getMultiplicationAccess().getOperatorAlternatives_1_1_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Multiplication__RightAssignment_1_2
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
		rulePrimary
		{ after(grammarAccess.getMultiplicationAccess().getRightPrimaryParserRuleCall_1_2_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
		RULE_INT
		{ after(grammarAccess.getIntLiteralAccess().getValINTTerminalRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__RealLiteral__ValAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
		ruleREAL
		{ after(grammarAccess.getRealLiteralAccess().getValREALParserRuleCall_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__IntVarExpression__VarAssignment
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
		(
			{ before(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
			RULE_ID
			{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationIDTerminalRuleCall_0_1()); }
		)
		{ after(grammarAccess.getIntVarExpressionAccess().getVarVariableDeclarationCrossReference_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__ScanAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckoutAccess().getScanScanParserRuleCall_3_0()); }
		ruleScan
		{ after(grammarAccess.getCheckoutAccess().getScanScanParserRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Checkout__PayAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getCheckoutAccess().getPayPayEnumRuleCall_4_0()); }
		rulePay
		{ after(grammarAccess.getCheckoutAccess().getPayPayEnumRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__NameAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScanAccess().getNameIDTerminalRuleCall_3_0()); }
		RULE_ID
		{ after(grammarAccess.getScanAccess().getNameIDTerminalRuleCall_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__Scan__AddToBagAssignment_4
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getScanAccess().getAddToBagAddToBagParserRuleCall_4_0()); }
		ruleAddToBag
		{ after(grammarAccess.getScanAccess().getAddToBagAddToBagParserRuleCall_4_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

rule__AddToBag__BagItemAssignment_3
	@init {
		int stackSize = keepStackSize();
	}
:
	(
		{ before(grammarAccess.getAddToBagAccess().getBagItemScanCrossReference_3_0()); }
		(
			{ before(grammarAccess.getAddToBagAccess().getBagItemScanIDTerminalRuleCall_3_0_1()); }
			RULE_ID
			{ after(grammarAccess.getAddToBagAccess().getBagItemScanIDTerminalRuleCall_3_0_1()); }
		)
		{ after(grammarAccess.getAddToBagAccess().getBagItemScanCrossReference_3_0()); }
	)
;
finally {
	restoreStackSize(stackSize);
}

RULE_ID : '^'? ('a'..'z'|'A'..'Z'|'_') ('a'..'z'|'A'..'Z'|'_'|'0'..'9')*;

RULE_INT : ('0'..'9')+;

RULE_STRING : ('"' ('\\' .|~(('\\'|'"')))* '"'|'\'' ('\\' .|~(('\\'|'\'')))* '\'');

RULE_ML_COMMENT : '/*' ( options {greedy=false;} : . )*'*/';

RULE_SL_COMMENT : '//' ~(('\n'|'\r'))* ('\r'? '\n')?;

RULE_WS : (' '|'\t'|'\r'|'\n')+;

RULE_ANY_OTHER : .;
